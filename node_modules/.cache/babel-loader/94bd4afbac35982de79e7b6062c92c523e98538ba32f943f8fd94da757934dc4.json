{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"test__questionCounter\"\n};\nconst _hoisted_2 = {\n  class: \"test__question\"\n};\nconst _hoisted_3 = {\n  class: \"test__question-name\"\n};\nconst _hoisted_4 = {\n  class: \"test__question-answers\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  class: \"test__passed\"\n};\nconst _hoisted_7 = {\n  class: \"test__questionNums\"\n};\nconst _hoisted_8 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, \"Вопрос \" + _toDisplayString($setup.questionNum + 1), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, _toDisplayString($setup.allTest[$setup.questionNum].question), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", {\n    class: \"test__question-answer\",\n    onClick: _cache[0] || (_cache[0] = $event => $setup.nextQuestion($setup.questionNum, $setup.allTest[$setup.questionNum], $setup.allTest[$setup.questionNum].score))\n  }, \"Да\"), _createElementVNode(\"div\", {\n    class: \"test__question-answer\",\n    onClick: _cache[1] || (_cache[1] = $event => $setup.nextQuestion($setup.questionNum, $setup.allTest[$setup.questionNum], 0))\n  }, \"Нет\"), _createElementVNode(\"div\", {\n    class: \"test__question-answer\",\n    onClick: _cache[2] || (_cache[2] = $event => $setup.nextQuestion($setup.questionNum, $setup.allTest[$setup.questionNum], $setup.allTest[$setup.questionNum].score))\n  }, \"Затрудняюсь ответить\"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.allTest, answer => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"test__question-answer\",\n      onClick: $event => $setup.nextQuestion($setup.questionNum, $setup.test[$setup.questionNum], answer)\n    }, _toDisplayString(answer), 9 /* TEXT, PROPS */, _hoisted_5);\n  }), 256 /* UNKEYED_FRAGMENT */))])]), _createCommentVNode(\" ./test__question \"), _createElementVNode(\"div\", _hoisted_6, \" Вы ответили на \" + _toDisplayString($setup.checkQuestionCompleted) + \" из \" + _toDisplayString($setup.allTest.length) + \" вопросов \", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.test.length, num => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: _normalizeClass([$setup.test[num - 1].isAnswered ? 'active' : '', \"test__questionNum\"]),\n      onClick: $event => $setup.questionNum = num - 1\n    }, _toDisplayString(num), 11 /* TEXT, CLASS, PROPS */, _hoisted_8);\n  }), 256 /* UNKEYED_FRAGMENT */))]), _createCommentVNode(\" ./test__questionNums \")], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementVNode","_hoisted_1","_toDisplayString","$setup","questionNum","_hoisted_2","_hoisted_3","allTest","question","_hoisted_4","onClick","_cache","$event","nextQuestion","score","_createElementBlock","_Fragment","_renderList","answer","test","_hoisted_5","_createCommentVNode","_hoisted_6","checkQuestionCompleted","length","_hoisted_7","num","_normalizeClass","isAnswered","_hoisted_8"],"sources":["E:\\Vue\\career_guidance\\src\\components\\TestTemplate.vue"],"sourcesContent":["<template>\r\n  <div class=\"test__questionCounter\">Вопрос {{ questionNum + 1 }}</div>\r\n\r\n  <div class=\"test__question\">\r\n    <div class=\"test__question-name\"> {{ allTest[questionNum].question }} </div>\r\n    <div class=\"test__question-answers\">\r\n      <div class=\"test__question-answer\" @click=\"nextQuestion(questionNum, allTest[questionNum], allTest[questionNum].score)\">Да</div>\r\n      <div class=\"test__question-answer\" @click=\"nextQuestion(questionNum, allTest[questionNum], 0)\">Нет</div>\r\n      <div class=\"test__question-answer\" @click=\"nextQuestion(questionNum, allTest[questionNum], allTest[questionNum].score)\">Затрудняюсь ответить</div>\r\n      <div\r\n          class=\"test__question-answer\"\r\n          v-for=\"answer in allTest\"\r\n          @click=\"nextQuestion(questionNum, test[questionNum], answer)\"\r\n      >\r\n        {{ answer }}\r\n      </div>\r\n    </div>\r\n  </div><!-- ./test__question -->\r\n  <div class=\"test__passed\">\r\n    Вы ответили на\r\n    {{ checkQuestionCompleted }}\r\n    из {{ allTest.length }} вопросов\r\n  </div>\r\n  <div class=\"test__questionNums\">\r\n    <div\r\n        :class=\"test[num-1].isAnswered ? 'active': ''\"\r\n        v-for=\"num in test.length\"\r\n        @click=\"questionNum = num-1\"\r\n        class=\"test__questionNum\">{{ num }}</div>\r\n  </div><!-- ./test__questionNums -->\r\n</template>\r\n\r\n<script>\r\nimport {computed, ref} from \"vue\";\r\nimport {useStore} from \"vuex\";\r\nimport {useRoute} from \"vue-router\";\r\nimport router from \"@/router\";\r\n\r\nexport default {\r\n  name: \"TestTemplate\",\r\n  async setup() {\r\n    let questionNum = ref(0);\r\n    const store = useStore();\r\n    const route = useRoute();\r\n\r\n    await store.dispatch(\"initialQuestionList\");\r\n\r\n    const tests = computed(() => store.getters.getTests);\r\n    const users = computed(() => store.getters.getUsers);\r\n    const routeName = computed(() => route.params.name);\r\n    const test = tests.value.filter((el) => el.name === routeName.value)[0].questions;\r\n    let allTest = []\r\n\r\n    for (let i = 0; i < test.length; i++) {\r\n      const innerArray = test[i].questions;\r\n      for (let j = 0; j < innerArray.length; j++) {\r\n        allTest.push(innerArray[j]);\r\n      }\r\n    }\r\n\r\n    let chosenAns = new Array(test.length);\r\n\r\n    let firstUnanswered = computed(() => test.findIndex(test => test.isAnswered === false));\r\n    let checkQuestionCompleted = computed(() => test.reduce((accumulator, currentValue) => accumulator + (currentValue.isAnswered ? 1 : 0), 0));\r\n\r\n    const sendAnswers = async (chosenAns) => {\r\n      let response = await fetch('http://localhost:8081/api/answers/send', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(chosenAns)\r\n      })\r\n      const result = await response.json();\r\n      return JSON.stringify(result);\r\n    }\r\n\r\n    function shuffleArray(array) {\r\n      for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n      }\r\n      return array;\r\n    }\r\n\r\n    let nextQuestion = async function (question, answer, chosenAnswer) {\r\n      if (checkQuestionCompleted.value + 1 !== test.length) {\r\n        this.test[question].isAnswered = true\r\n        chosenAns[question] = chosenAnswer;\r\n\r\n        if (firstUnanswered.value > -1) {\r\n          questionNum.value = firstUnanswered.value;\r\n        } else {\r\n          questionNum.value++;\r\n        }\r\n      }\r\n      else {\r\n        chosenAns[question] = chosenAnswer;\r\n        const result = await sendAnswers(chosenAns);\r\n        if (store.getters.getAuth) {\r\n          users.value.filter((el) => el.id.toString() === store.getters.getUserId)[0].history = Object.entries(JSON.parse(result));\r\n        }\r\n        else {\r\n          localStorage.setItem('test', result);\r\n        }\r\n        setTimeout(() => {\r\n          router.push('/result');\r\n        }, 250);\r\n      }\r\n    }\r\n    return {\r\n      questionNum,\r\n      test,\r\n      nextQuestion,\r\n      checkQuestionCompleted,\r\n      allTest: shuffleArray(allTest)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAuB;;EAE7BA,KAAK,EAAC;AAAgB;;EACpBA,KAAK,EAAC;AAAqB;;EAC3BA,KAAK,EAAC;AAAwB;;;EAahCA,KAAK,EAAC;AAAc;;EAKpBA,KAAK,EAAC;AAAoB;;;6DAtB/BC,mBAAA,CAAqE,OAArEC,UAAqE,EAAlC,SAAO,GAAAC,gBAAA,CAAGC,MAAA,CAAAC,WAAW,sBAExDJ,mBAAA,CAcM,OAdNK,UAcM,GAbJL,mBAAA,CAA4E,OAA5EM,UAA4E,EAAAJ,gBAAA,CAAvCC,MAAA,CAAAI,OAAO,CAACJ,MAAA,CAAAC,WAAW,EAAEI,QAAQ,kBAClER,mBAAA,CAWM,OAXNS,UAWM,GAVJT,mBAAA,CAAgI;IAA3HD,KAAK,EAAC,uBAAuB;IAAEW,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAET,MAAA,CAAAU,YAAY,CAACV,MAAA,CAAAC,WAAW,EAAED,MAAA,CAAAI,OAAO,CAACJ,MAAA,CAAAC,WAAW,GAAGD,MAAA,CAAAI,OAAO,CAACJ,MAAA,CAAAC,WAAW,EAAEU,KAAK;KAAG,IAAE,GAC1Hd,mBAAA,CAAwG;IAAnGD,KAAK,EAAC,uBAAuB;IAAEW,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAET,MAAA,CAAAU,YAAY,CAACV,MAAA,CAAAC,WAAW,EAAED,MAAA,CAAAI,OAAO,CAACJ,MAAA,CAAAC,WAAW;KAAO,KAAG,GAClGJ,mBAAA,CAAkJ;IAA7ID,KAAK,EAAC,uBAAuB;IAAEW,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAET,MAAA,CAAAU,YAAY,CAACV,MAAA,CAAAC,WAAW,EAAED,MAAA,CAAAI,OAAO,CAACJ,MAAA,CAAAC,WAAW,GAAGD,MAAA,CAAAI,OAAO,CAACJ,MAAA,CAAAC,WAAW,EAAEU,KAAK;KAAG,sBAAoB,I,kBAC5IC,mBAAA,CAMMC,SAAA,QAAAC,WAAA,CAJed,MAAA,CAAAI,OAAO,EAAjBW,MAAM;yBAFjBH,mBAAA,CAMM;MALFhB,KAAK,EAAC,uBAAuB;MAE5BW,OAAK,EAAAE,MAAA,IAAET,MAAA,CAAAU,YAAY,CAACV,MAAA,CAAAC,WAAW,EAAED,MAAA,CAAAgB,IAAI,CAAChB,MAAA,CAAAC,WAAW,GAAGc,MAAM;wBAE1DA,MAAM,wBAAAE,UAAA;wCAGTC,mBAAA,sBAAyB,EAC/BrB,mBAAA,CAIM,OAJNsB,UAIM,EAJoB,kBAExB,GAAApB,gBAAA,CAAGC,MAAA,CAAAoB,sBAAsB,IAAG,MACzB,GAAArB,gBAAA,CAAGC,MAAA,CAAAI,OAAO,CAACiB,MAAM,IAAG,YACzB,iBACAxB,mBAAA,CAMM,OANNyB,UAMM,I,kBALJV,mBAAA,CAI6CC,SAAA,QAAAC,WAAA,CAF3Bd,MAAA,CAAAgB,IAAI,CAACK,MAAM,EAAlBE,GAAG;yBAFdX,mBAAA,CAI6C;MAHxChB,KAAK,EAAA4B,eAAA,EAAExB,MAAA,CAAAgB,IAAI,CAACO,GAAG,MAAIE,UAAU,kBAGxB,mBAAmB;MADxBlB,OAAK,EAAAE,MAAA,IAAET,MAAA,CAAAC,WAAW,GAAGsB,GAAG;wBACIA,GAAG,gCAAAG,UAAA;sCAChCR,mBAAA,0BAA6B,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}