{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, Suspense as _Suspense, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"test\"\n};\nconst _hoisted_2 = {\n  class: \"test__title\"\n};\nexport function render(_ctx, _cache) {\n  const _component_test_template = _resolveComponent(\"test-template\");\n  const _component_comments = _resolveComponent(\"comments\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"h1\", _hoisted_2, _toDisplayString(_ctx.name), 1 /* TEXT */), (_openBlock(), _createBlock(_Suspense, null, {\n    default: _withCtx(() => [_createVNode(_component_test_template)]),\n    _: 1 /* STABLE */\n  }))]), (_openBlock(), _createBlock(_Suspense, null, {\n    default: _withCtx(() => [_createVNode(_component_comments)]),\n    _: 1 /* STABLE */\n  }))], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementVNode","_hoisted_1","_hoisted_2","_toDisplayString","_ctx","name","_createBlock","_Suspense","_createVNode","_component_test_template","_component_comments"],"sources":["E:\\Vue\\career_guidance\\src\\views\\Test.vue"],"sourcesContent":["<template>\r\n  <div class=\"test\">\r\n    <h1 class=\"test__title\">{{ name }}</h1>\r\n    <Suspense>\r\n      <test-template></test-template>\r\n    </Suspense>\r\n  </div>\r\n  <Suspense>\r\n    <comments></comments>\r\n  </Suspense>\r\n</template>\r\n\r\n<script>\r\nimport {computed, ref} from \"vue\";\r\nimport router from \"@/router\";\r\nimport Comments from \"@/components/Comments.vue\";\r\nimport {useStore} from \"vuex\";\r\nimport {useRoute} from \"vue-router\";\r\nimport TestTemplate from \"@/components/TestTemplate.vue\";\r\n\r\nexport default {\r\n  name: \"Test\",\r\n  components: {TestTemplate, Comments },\r\n  props: ['name'],\r\n  setup() {\r\n\r\n    let questionNum = ref(0);\r\n    const store = useStore();\r\n    const route = useRoute();\r\n    await store.dispatch(\"initialQuestionList\");\r\n\r\n    const tests = computed(() => store.getters.getTests);\r\n    const routeName = computed(() => route.params.name);\r\n    const test = tests.value.filter((el) => el.name === routeName.value)[0].questions;\r\n    let que = tests.value.filter((el) => el.name === routeName.value)[0].question;\r\n\r\n    console.log(que)\r\n\r\n    let firstUnanswered = computed(() => test.findIndex(test => test.isAnswered === false));\r\n    let checkQuestionCompleted = computed(() => test.reduce((accumulator, currentValue) => accumulator + (currentValue.isAnswered ? 1 : 0), 0))\r\n    let nextQuestion = function (question, answer) {\r\n      if(checkQuestionCompleted.value + 1 !== test.length) {\r\n        this.test[question].isAnswered = true;\r\n        this.test[question].chosenAnswer = answer;\r\n\r\n        if (firstUnanswered.value > -1) {\r\n          questionNum.value = firstUnanswered.value;\r\n        }\r\n        else {\r\n          questionNum.value++;\r\n        }\r\n      }\r\n      else {\r\n        this.test[question].isAnswered = true;\r\n        setTimeout(() => { router.push('/result'); }, 250);\r\n      }\r\n    }\r\n    return {\r\n      questionNum,\r\n      test,\r\n      nextQuestion,\r\n      checkQuestionCompleted,\r\n      que\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAM;;EACXA,KAAK,EAAC;AAAa;;;;6DADzBC,mBAAA,CAKM,OALNC,UAKM,GAJJD,mBAAA,CAAuC,MAAvCE,UAAuC,EAAAC,gBAAA,CAAZC,IAAA,CAAAC,IAAI,mB,cAC/BC,YAAA,CAEWC,SAAA;sBADT,MAA+B,CAA/BC,YAAA,CAA+BC,wBAAA,E;;wBAGnCH,YAAA,CAEWC,SAAA;sBADT,MAAqB,CAArBC,YAAA,CAAqBE,mBAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}