{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { computed, onMounted, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nexport default {\n  name: \"Comments\",\n  setup() {\n    const store = useStore();\n    onMounted(async () => {\n      await store.dispatch('initialCommentsList');\n      console.log('mounted');\n    });\n    const today = new Date();\n    const yyyy = today.getFullYear();\n    let mm = today.getMonth() + 1;\n    let dd = today.getDate();\n    if (dd < 10) dd = '0' + dd;\n    if (mm < 10) mm = '0' + mm;\n    const formattedToday = dd + '-' + mm + '-' + yyyy;\n    let starsCount = ref(0);\n    let inputComment = ref('');\n    let starSave = function (star) {\n      starsCount.value = star;\n    };\n    let putLikeDis = async function (comment, mainInter, oppositeInter, main, reverse, idx) {\n      let userId = parseInt(store.getters.getUserId);\n      if (store.getters.getAuth) {\n        if (mainInter.users?.indexOf(userId) == -1 && oppositeInter.users?.indexOf(userId) == -1) {\n          mainInter.count += 1;\n          mainInter.users.push(userId);\n          comment[main.replace(/'/g)] = true;\n          let bodyResult = {};\n          if (main === 'liked') {\n            bodyResult['userIdLikes'] = mainInter.count;\n            bodyResult['userIdLikes'];\n          } else if (main === 'disliked') {}\n          await fetch('https://proffesion-choose-default-rtdb.firebaseio.com/' + commentsKeys[idx], {\n            method: 'PUT',\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({})\n          });\n        } else if (mainInter.users == undefined) {\n          if (oppositeInter.users != undefined) {\n            oppositeInter.users.splice(oppositeInter.users.findIndex(id => id === userId), 1);\n            oppositeInter.count -= 1;\n            comment[reverse.replace(/'/g)] = false;\n          }\n          mainInter.users = [parseInt(userId)];\n          mainInter.count += 1;\n          comment[main.replace(/'/g)] = true;\n        } else if (mainInter.users?.indexOf(userId) == -1 && oppositeInter.users?.indexOf(userId) != -1) {\n          mainInter.count += 1;\n          mainInter.users.push(userId);\n          if (oppositeInter.users != undefined) {\n            oppositeInter.users.splice(oppositeInter.users.findIndex(id => id === userId), 1);\n            oppositeInter.count -= 1;\n          }\n          comment[main.replace(/'/g)] = true;\n          comment[reverse.replace(/'/g)] = false;\n        } else if (mainInter.users?.indexOf(userId) != -1 && (oppositeInter.users == undefined || oppositeInter.users?.indexOf(userId) == -1)) {\n          mainInter.users.splice(mainInter.users.findIndex(id => id === userId), 1);\n          mainInter.count -= 1;\n          comment[main.replace(/'/g)] = false;\n        }\n      } else {\n        store.commit('toggleOpenedAuth');\n        document.body.style.overflow = \"hidden\";\n        document.documentElement.scrollTop = 0;\n      }\n    };\n    let leaveAComment = async function () {\n      if (store.getters.getAuth) {\n        if (inputComment.value !== '' && starsCount.value !== 0) {\n          let userName = store.getters.getUsers.filter(el => el.id === parseInt(store.getters.getUserId)).map(map => map.username).toString();\n          const response = await fetch('https://proffesion-choose-default-rtdb.firebaseio.com/comments.json', {\n            method: 'POST',\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              user: userName,\n              date: formattedToday,\n              stars: starsCount.value,\n              comment: inputComment.value,\n              usersIdLikes: {\n                'count': 0,\n                users: []\n              },\n              usersIdDislikes: {\n                'count': 0,\n                users: []\n              },\n              liked: false,\n              disliked: false,\n              openedInput: false,\n              inputValue: '',\n              answered: []\n            })\n          }).then(res => {\n            if (res.ok) {\n              console.log('Успешно');\n            }\n          });\n          await store.dispatch('initialCommentsList');\n          inputComment.value = '';\n        } else {\n          alert('Пожалуйста, напишите комментарий и оцените тест по 5-и бальной шкале');\n        }\n      } else {\n        store.commit('toggleOpenedAuth');\n        document.body.style.overflow = \"hidden\";\n        document.documentElement.scrollTop = 0;\n      }\n    };\n    let openInput = comment => comment.openedInput = !comment.openedInput;\n    let answerComment = function (comment) {\n      if (store.getters.getAuth) {\n        if (comment.inputValue !== '') {\n          let userName = store.getters.getUsers.filter(el => el.id === parseInt(store.getters.getUserId)).map(map => map.username).toString();\n          comment.answered.push({\n            user: userName,\n            date: formattedToday,\n            comment: comment.inputValue,\n            usersIdLikes: [],\n            usersIdDislikes: []\n          });\n          comment.inputValue = '';\n          comment.openedInput = false;\n        } else {\n          alert('Пожалуйста, напишите ответ на комментарий');\n        }\n      } else {\n        store.commit('toggleOpenedAuth');\n        document.body.style.overflow = \"hidden\";\n        document.documentElement.scrollTop = 0;\n      }\n    };\n    let commentsArray = computed(() => Object.values(store.getters.getComments));\n    let commentsKeys = computed(() => Object.keys(store.getters.getComments));\n    return {\n      commentsArray,\n      putLikeDis,\n      starSave,\n      leaveAComment,\n      inputComment,\n      answerComment,\n      openInput,\n      store\n    };\n  }\n};","map":{"version":3,"names":["computed","onMounted","ref","useStore","name","setup","store","dispatch","console","log","today","Date","yyyy","getFullYear","mm","getMonth","dd","getDate","formattedToday","starsCount","inputComment","starSave","star","value","putLikeDis","comment","mainInter","oppositeInter","main","reverse","idx","userId","parseInt","getters","getUserId","getAuth","users","indexOf","count","push","replace","bodyResult","fetch","commentsKeys","method","headers","body","JSON","stringify","undefined","splice","findIndex","id","commit","document","style","overflow","documentElement","scrollTop","leaveAComment","userName","getUsers","filter","el","map","username","toString","response","user","date","stars","usersIdLikes","usersIdDislikes","liked","disliked","openedInput","inputValue","answered","then","res","ok","alert","openInput","answerComment","commentsArray","Object","values","getComments","keys"],"sources":["E:\\Vue\\career_guidance\\src\\components\\Comments.vue"],"sourcesContent":["<template>\r\n<div class=\"comments\" v-if=\"commentsArray.length > 0\">\r\n  <h2 class=\"comments__title\">Поделитесь со своми впечатлениями ({{ commentsArray.length }})</h2>\r\n  <div class=\"comments__leaveAComment\">\r\n    <span class=\"comments__stars\">\r\n      <input type=\"radio\" name=\"rating\" value=\"5\" id=\"5\" @click=\"starSave($event.target.value)\"><label for=\"5\">☆</label>\r\n      <input type=\"radio\" name=\"rating\" value=\"4\" id=\"4\" @click=\"starSave($event.target.value)\"><label for=\"4\">☆</label>\r\n      <input type=\"radio\" name=\"rating\" value=\"3\" id=\"3\" @click=\"starSave($event.target.value)\"><label for=\"3\">☆</label>\r\n      <input type=\"radio\" name=\"rating\" value=\"2\" id=\"2\" @click=\"starSave($event.target.value)\"><label for=\"2\">☆</label>\r\n      <input type=\"radio\" name=\"rating\" value=\"1\" id=\"1\" @click=\"starSave($event.target.value)\"><label for=\"1\">☆</label>\r\n    </span>\r\n    <div class=\"comments__input\">\r\n      <input\r\n          class=\"comments__input-input\"\r\n          type=\"text\"\r\n          placeholder=\"Напишите комментарий\"\r\n          v-on:keyup.enter=\"leaveAComment\"\r\n          v-model.trim=\"inputComment\"\r\n      >\r\n      <img\r\n          class=\"comments__input-img\"\r\n          src=\"../images/png/ArrowToRightBlue.png\"\r\n          alt=\"arrow\"\r\n          @click=\"leaveAComment\"\r\n      >\r\n    </div>\r\n  </div><!-- ./comments__leaveAComment -->\r\n  <div class=\"comments__list\">\r\n    <div class=\"comments__item\" v-for=\"(comment, idx) in Object.values(commentsArray)\" :key=\"comment\">\r\n      <div class=\"comments__user\">\r\n        <div class=\"comments__user-name\">{{ comment.user }}</div>\r\n        <div class=\"comments__user-date\">{{ comment.date }}</div>\r\n        <div class=\"comments__user-stars\">\r\n          <img src=\"../images/png/Star-black.png\" alt=\"star\" v-for=\"item in parseInt(comment.stars)\">\r\n        </div>\r\n      </div><!-- ./comments__user -->\r\n      <div class=\"comments__item-text\">{{ comment.comment }}</div>\r\n      <div class=\"comments__item-interaction\">\r\n        <div class=\"comments__item-answer\" @click=\"openInput(comment)\">Ответить</div>\r\n        <div class=\"comments__item-response\">\r\n          <div class=\"comments__item-likes\">\r\n            <img\r\n                @click=\"putLikeDis(comment, comment.usersIdLikes, comment.usersIdDislikes, 'liked', 'disliked', idx)\"\r\n                class=\"comments__item-interactionImage\"\r\n                :class=\"comment.liked ? 'active' : ''\"\r\n                src=\"../images/png/mdi_like.png\"\r\n                alt=\"likes\">\r\n            <span>{{ comment.usersIdLikes.count }}</span>\r\n          </div>\r\n          <div class=\"comments__item-dislikes\">\r\n            <img\r\n                @click=\"putLikeDis(comment, comment.usersIdDislikes, comment.usersIdLikes, 'disliked', 'liked', idx)\"\r\n                class=\"comments__item-interactionImage\"\r\n                :class=\"comment.disliked ? 'active' : ''\"\r\n                src=\"../images/png/mdi_dislike.png\"\r\n                alt=\"dislike\">\r\n            <span>{{ comment.usersIdDislikes.count }}</span>\r\n          </div><!-- ./comments__item-dislikes -->\r\n        </div><!-- ./comments__item-response -->\r\n      </div><!-- ./comments__item-interaction -->\r\n\r\n      <div class=\"comments__answer\" v-if=\"comment.openedInput\">\r\n        <input type=\"text\" v-model.trim=\"comment.inputValue\">\r\n        <button type=\"button\" @click=\"answerComment(comment)\">Ответить</button>\r\n      </div>\r\n\r\n      <div class=\"comments__response\" v-for=\"answered in comment.answered\" :key=\"answered\">\r\n        <div class=\"comments__user\">\r\n          <div class=\"comments__user-name\">{{ answered.user }}</div>\r\n          <div class=\"comments__user-date\">{{ answered.date }}</div>\r\n        </div><!-- ./comments__user -->\r\n        <div class=\"comments__item-text\">{{ answered.comment }}</div>\r\n        <div class=\"comments__item-interaction\">\r\n          <div class=\"comments__item-response\">\r\n            <div class=\"comments__item-likes\">\r\n              <img\r\n                  @click=\"putLikeDis(answered, answered.usersIdLikes, answered.usersIdDislikes, 'liked', 'disliked', idx)\"\r\n                  class=\"comments__item-interactionImage\"\r\n                  :class=\"answered.liked ? 'active' : ''\"\r\n                  src=\"../images/png/mdi_like.png\"\r\n                  alt=\"likes\">\r\n              <span>{{ answered.usersIdLikes.count }}</span>\r\n            </div>\r\n            <div class=\"comments__item-dislikes\">\r\n              <img\r\n                  @click=\"putLikeDis(answered, answered.usersIdDislikes, answered.usersIdLikes, 'disliked', 'liked', idx)\"\r\n                  class=\"comments__item-interactionImage\"\r\n                  :class=\"answered.disliked ? 'active' : ''\"\r\n                  src=\"../images/png/mdi_dislike.png\"\r\n                  alt=\"dislike\">\r\n              <span>{{ answered.usersIdDislikes.count }}</span>\r\n            </div><!-- ./comments__item-dislikes -->\r\n          </div><!-- ./comments__item-response -->\r\n        </div><!-- ./comments__item-interaction -->\r\n      </div><!--./comments__response -->\r\n\r\n    </div><!-- ./comments__item -->\r\n  </div><!-- ./comments__list -->\r\n</div><!-- ./comments -->\r\n<div v-else>Комменатрии грузятся</div>\r\n</template>\r\n\r\n<script>\r\nimport {computed, onMounted, ref} from \"vue\";\r\nimport {useStore} from \"vuex\";\r\n\r\nexport default {\r\n  name: \"Comments\",\r\n  setup () {\r\n    const store = useStore()\r\n    onMounted(async () => {\r\n      await store.dispatch('initialCommentsList')\r\n      console.log('mounted')\r\n    })\r\n\r\n    const today = new Date();\r\n    const yyyy = today.getFullYear();\r\n    let mm = today.getMonth() + 1;\r\n    let dd = today.getDate();\r\n    if (dd < 10) dd = '0' + dd;\r\n    if (mm < 10) mm = '0' + mm;\r\n    const formattedToday = dd + '-' + mm + '-' + yyyy;\r\n\r\n    let starsCount = ref(0);\r\n    let inputComment = ref('');\r\n\r\n    let starSave = function (star) {\r\n      starsCount.value = star;\r\n    }\r\n\r\n    let putLikeDis = async function (comment, mainInter, oppositeInter, main, reverse, idx) {\r\n      let userId = parseInt(store.getters.getUserId)\r\n      if (store.getters.getAuth) {\r\n        if (mainInter.users?.indexOf(userId) == -1 && oppositeInter.users?.indexOf(userId) == -1) {\r\n          mainInter.count += 1\r\n          mainInter.users.push(userId);\r\n          comment[main.replace(/'/g)] = true;\r\n          let bodyResult = {}\r\n          if(main === 'liked') {\r\n            bodyResult['userIdLikes'] = mainInter.count\r\n            bodyResult['userIdLikes']\r\n          }\r\n          else if(main === 'disliked') {\r\n\r\n          }\r\n          await fetch('https://proffesion-choose-default-rtdb.firebaseio.com/' + commentsKeys[idx], {\r\n            method: 'PUT',\r\n            headers: {\r\n              \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n\r\n            })\r\n          })\r\n        }\r\n        else if (mainInter.users == undefined) {\r\n          if(oppositeInter.users != undefined) {\r\n            oppositeInter.users.splice(oppositeInter.users.findIndex(id => id === userId), 1);\r\n            oppositeInter.count -= 1\r\n            comment[reverse.replace(/'/g)] = false;\r\n          }\r\n          mainInter.users = [parseInt(userId)]\r\n          mainInter.count += 1\r\n          comment[main.replace(/'/g)] = true;\r\n        }\r\n        else if (mainInter.users?.indexOf(userId) == -1 && oppositeInter.users?.indexOf(userId) != -1) {\r\n          mainInter.count += 1\r\n          mainInter.users.push(userId);\r\n          if (oppositeInter.users != undefined) {\r\n            oppositeInter.users.splice(oppositeInter.users.findIndex(id => id === userId), 1);\r\n            oppositeInter.count -= 1\r\n          }\r\n\r\n          comment[main.replace(/'/g)] = true;\r\n          comment[reverse.replace(/'/g)] = false;\r\n        }\r\n        else if (mainInter.users?.indexOf(userId) != -1 && (oppositeInter.users == undefined || oppositeInter.users?.indexOf(userId) == -1)) {\r\n          mainInter.users.splice(mainInter.users.findIndex(id => id === userId), 1)\r\n          mainInter.count -= 1\r\n          comment[main.replace(/'/g)] = false;\r\n        }\r\n      }\r\n      else {\r\n        store.commit('toggleOpenedAuth');\r\n        document.body.style.overflow = \"hidden\";\r\n        document.documentElement.scrollTop = 0;\r\n      }\r\n    };\r\n\r\n    let leaveAComment = async function () {\r\n      if(store.getters.getAuth) {\r\n        if(inputComment.value !== '' && starsCount.value !== 0) {\r\n          let userName = store.getters.getUsers\r\n              .filter((el) => el.id === parseInt(store.getters.getUserId))\r\n              .map(map => map.username).toString();\r\n          const response = await fetch('https://proffesion-choose-default-rtdb.firebaseio.com/comments.json', {\r\n            method: 'POST',\r\n            headers: {\r\n              \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n              user: userName,\r\n              date: formattedToday,\r\n              stars: starsCount.value,\r\n              comment: inputComment.value,\r\n              usersIdLikes: {'count': 0, users: []},\r\n              usersIdDislikes: {'count': 0, users: []},\r\n              liked: false,\r\n              disliked: false,\r\n              openedInput: false,\r\n              inputValue: '',\r\n              answered: []\r\n            })\r\n          }).then(res => {\r\n            if (res.ok) {\r\n              console.log('Успешно')\r\n            }\r\n          })\r\n          await store.dispatch('initialCommentsList')\r\n          inputComment.value = ''\r\n        }\r\n        else {\r\n          alert('Пожалуйста, напишите комментарий и оцените тест по 5-и бальной шкале')\r\n        }\r\n      }\r\n      else {\r\n        store.commit('toggleOpenedAuth');\r\n        document.body.style.overflow = \"hidden\";\r\n        document.documentElement.scrollTop = 0;\r\n      }\r\n    }\r\n\r\n    let openInput = (comment) => comment.openedInput = !comment.openedInput;\r\n\r\n    let answerComment = function (comment) {\r\n      if(store.getters.getAuth) {\r\n        if(comment.inputValue !== '') {\r\n          let userName = store.getters.getUsers\r\n              .filter((el) => el.id === parseInt(store.getters.getUserId))\r\n              .map(map => map.username).toString();\r\n          comment.answered.push({\r\n            user: userName,\r\n            date: formattedToday,\r\n            comment: comment.inputValue,\r\n            usersIdLikes: [],\r\n            usersIdDislikes: []\r\n          })\r\n          comment.inputValue = '';\r\n          comment.openedInput = false;\r\n        }\r\n        else {\r\n          alert('Пожалуйста, напишите ответ на комментарий')\r\n        }\r\n      }\r\n      else {\r\n        store.commit('toggleOpenedAuth');\r\n        document.body.style.overflow = \"hidden\";\r\n        document.documentElement.scrollTop = 0;\r\n      }\r\n    }\r\n    let commentsArray = computed(() => Object.values(store.getters.getComments));\r\n    let commentsKeys = computed(() => Object.keys(store.getters.getComments));\r\n\r\n    return {\r\n      commentsArray,\r\n      putLikeDis,\r\n      starSave,\r\n      leaveAComment,\r\n      inputComment,\r\n      answerComment,\r\n      openInput,\r\n      store\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}