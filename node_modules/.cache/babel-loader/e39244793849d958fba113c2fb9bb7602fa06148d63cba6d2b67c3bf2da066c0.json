{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { computed, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { useRoute } from \"vue-router\";\nimport router from \"@/router\";\nimport axios from \"axios\";\nexport default {\n  name: \"TestTemplate\",\n  async setup() {\n    let questionNum = ref(0);\n    const store = useStore();\n    const route = useRoute();\n    await store.dispatch(\"initialQuestionList\");\n    const tests = computed(() => store.getters.getTests);\n    const users = computed(() => store.getters.getUsers);\n    const routeName = computed(() => route.params.name);\n    const test = tests.value.filter(el => el.name === routeName.value)[0].questions;\n    let allTest = [];\n    for (let i = 0; i < test.length; i++) {\n      const innerArray = test[i].questions;\n      for (let j = 0; j < innerArray.length; j++) {\n        allTest.push(innerArray[j]);\n        allTest[allTest.length - 1]['isAnswered'] = false;\n        allTest[allTest.length - 1]['name'] = test[i].name;\n      }\n    }\n    let firstUnanswered = computed(() => test.findIndex(test => test.isAnswered === false));\n    let checkQuestionCompleted = computed(() => allTest.reduce((accumulator, currentValue) => accumulator + (currentValue.isAnswered ? 1 : 0), 0));\n    const sendAnswers = async function (chosenAns) {\n      let {\n        data\n      } = await axios.post('profession/getProfessionsByKey', {\n        chosenAns\n      });\n      return data;\n    };\n    function shuffleArray(array) {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n      return array;\n    }\n    let total = {\n      'человек-природа': 0,\n      'человек-техника': 0,\n      'человек-знаковая система': 0,\n      'человек-искусство': 0,\n      'человек-человек': 0\n    };\n    function getMaxKeys(obj) {\n      let max = -Infinity;\n      let maxKeys = [];\n      for (let key in obj) {\n        let val = obj[key];\n        if (typeof val === 'number' && val >= max) {\n          if (val > max) {\n            max = val;\n            maxKeys = [key];\n          } else {\n            maxKeys.push(key);\n          }\n        }\n      }\n      return maxKeys;\n    }\n    let nextQuestion = async function (question, answer, chosenAnswer) {\n      if (checkQuestionCompleted.value + 1 !== allTest.length) {\n        allTest[question].isAnswered = true;\n        total[allTest[question].name] += chosenAnswer;\n        console.log(total);\n        if (firstUnanswered.value > -1) {\n          questionNum.value = firstUnanswered.value;\n        } else {\n          questionNum.value++;\n        }\n      } else {\n        let max = getMaxKeys(total);\n        for (let i = 0; i < max.length; i++) {\n          const result = await sendAnswers();\n        }\n        if (store.getters.getAuth) {\n          users.value.filter(el => el.id.toString() === store.getters.getUserId)[0].history = Object.entries(JSON.parse(result));\n        } else {\n          localStorage.setItem('test', result);\n        }\n        setTimeout(() => {\n          router.push('/result');\n        }, 250);\n      }\n    };\n    return {\n      questionNum,\n      test,\n      nextQuestion,\n      checkQuestionCompleted,\n      allTest: shuffleArray(allTest)\n    };\n  }\n};","map":{"version":3,"names":["computed","ref","useStore","useRoute","router","axios","name","setup","questionNum","store","route","dispatch","tests","getters","getTests","users","getUsers","routeName","params","test","value","filter","el","questions","allTest","i","length","innerArray","j","push","firstUnanswered","findIndex","isAnswered","checkQuestionCompleted","reduce","accumulator","currentValue","sendAnswers","chosenAns","data","post","shuffleArray","array","Math","floor","random","total","getMaxKeys","obj","max","Infinity","maxKeys","key","val","nextQuestion","question","answer","chosenAnswer","console","log","result","getAuth","id","toString","getUserId","history","Object","entries","JSON","parse","localStorage","setItem","setTimeout"],"sources":["E:\\Vue\\career_guidance\\src\\components\\TestTemplate.vue"],"sourcesContent":["<template>\r\n  <div class=\"test__questionCounter\">Вопрос {{ questionNum + 1 }}</div>\r\n\r\n  <div class=\"test__question\">\r\n    <div class=\"test__question-name\"> {{ allTest[questionNum].question }}</div>\r\n    <div class=\"test__question-answers\">\r\n      <div class=\"test__question-answer\" @click=\"nextQuestion(questionNum, allTest[questionNum], allTest[questionNum].score)\">Да</div>\r\n      <div class=\"test__question-answer\" @click=\"nextQuestion(questionNum, allTest[questionNum], allTest[questionNum].score * -1)\">Нет</div>\r\n      <div class=\"test__question-answer\" @click=\"nextQuestion(questionNum, allTest[questionNum], 0)\">Затрудняюсь ответить</div>\r\n    </div>\r\n  </div><!-- ./test__question -->\r\n  <div class=\"test__passed\">\r\n    Вы ответили на\r\n    {{ checkQuestionCompleted }}\r\n    из {{ allTest.length }} вопросов\r\n  </div>\r\n  <div class=\"test__questionNums\">\r\n    <div\r\n        :class=\"allTest[num-1].isAnswered ? 'active': ''\"\r\n        v-for=\"num in allTest.length\"\r\n        @click=\"questionNum = num-1\"\r\n        class=\"test__questionNum\">{{ num }}</div>\r\n  </div><!-- ./test__questionNums -->\r\n</template>\r\n\r\n<script>\r\nimport {computed, ref} from \"vue\";\r\nimport {useStore} from \"vuex\";\r\nimport {useRoute} from \"vue-router\";\r\nimport router from \"@/router\";\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"TestTemplate\",\r\n  async setup() {\r\n    let questionNum = ref(0);\r\n    const store = useStore();\r\n    const route = useRoute();\r\n\r\n    await store.dispatch(\"initialQuestionList\");\r\n\r\n    const tests = computed(() => store.getters.getTests);\r\n    const users = computed(() => store.getters.getUsers);\r\n    const routeName = computed(() => route.params.name);\r\n    const test = tests.value.filter((el) => el.name === routeName.value)[0].questions;\r\n    let allTest = []\r\n\r\n    for (let i = 0; i < test.length; i++) {\r\n      const innerArray = test[i].questions;\r\n      for (let j = 0; j < innerArray.length; j++) {\r\n        allTest.push(innerArray[j]);\r\n        allTest[allTest.length-1]['isAnswered'] = false;\r\n        allTest[allTest.length-1]['name'] = test[i].name;\r\n      }\r\n    }\r\n\r\n    let firstUnanswered = computed(() => test.findIndex(test => test.isAnswered === false));\r\n    let checkQuestionCompleted = computed(() => allTest.reduce((accumulator, currentValue) => accumulator + (currentValue.isAnswered ? 1 : 0), 0));\r\n\r\n    const sendAnswers = async function (chosenAns) {\r\n      let {data} = await axios.post('profession/getProfessionsByKey', {chosenAns})\r\n      return data\r\n    }\r\n\r\n    function shuffleArray(array) {\r\n      for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n      }\r\n      return array;\r\n    }\r\n\r\n    let total = {\r\n      'человек-природа' : 0,\r\n      'человек-техника' : 0,\r\n      'человек-знаковая система' : 0,\r\n      'человек-искусство' : 0,\r\n      'человек-человек' : 0\r\n    };\r\n\r\n    function getMaxKeys(obj) {\r\n      let max = -Infinity;\r\n      let maxKeys = [];\r\n\r\n      for (let key in obj) {\r\n        let val = obj[key];\r\n        if (typeof val === 'number' && val >= max) {\r\n          if (val > max) {\r\n            max = val;\r\n            maxKeys = [key];\r\n          } else {\r\n            maxKeys.push(key);\r\n          }\r\n        }\r\n      }\r\n\r\n      return maxKeys;\r\n    }\r\n\r\n\r\n    let nextQuestion = async function (question, answer, chosenAnswer) {\r\n      if (checkQuestionCompleted.value + 1 !== allTest.length) {\r\n        allTest[question].isAnswered = true\r\n        total[allTest[question].name] += chosenAnswer\r\n        console.log(total)\r\n        if (firstUnanswered.value > -1) {\r\n          questionNum.value = firstUnanswered.value;\r\n        } else {\r\n          questionNum.value++;\r\n        }\r\n      }\r\n      else {\r\n        let max = getMaxKeys(total)\r\n        for (let i = 0; i < max.length; i++) {\r\n          const result = await sendAnswers();\r\n        }\r\n        if (store.getters.getAuth) {\r\n          users.value.filter((el) => el.id.toString() === store.getters.getUserId)[0].history = Object.entries(JSON.parse(result));\r\n        }\r\n        else {\r\n          localStorage.setItem('test', result);\r\n        }\r\n        setTimeout(() => {\r\n          router.push('/result');\r\n        }, 250);\r\n      }\r\n    }\r\n    return {\r\n      questionNum,\r\n      test,\r\n      nextQuestion,\r\n      checkQuestionCompleted,\r\n      allTest: shuffleArray(allTest)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}