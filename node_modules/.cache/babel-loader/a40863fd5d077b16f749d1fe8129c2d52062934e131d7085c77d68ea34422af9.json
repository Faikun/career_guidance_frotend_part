{"ast":null,"code":"import { createRouter, createWebHistory } from 'vue-router';\nimport store from \"@/store\";\nconst routes = [{\n  path: '/',\n  redirect: '/tests'\n}, {\n  path: '/tests',\n  name: 'tests',\n  component: import('@/views/Tests.vue')\n}, {\n  path: '/prof',\n  name: 'prof',\n  component: import('@/views/ProfOrientation.vue')\n}, {\n  path: '/test',\n  name: 'test',\n  component: import('@/views/Test.vue')\n}, {\n  path: '/result',\n  name: 'result',\n  component: import('@/views/Result.vue')\n}, {\n  path: '/reset',\n  name: 'reset',\n  component: import('@/views/Reset.vue')\n}, {\n  path: '/professions',\n  name: 'Professions',\n  component: import('@/views/Professions.vue')\n}, {\n  path: '/professions/:name',\n  name: 'Exact_Professions',\n  component: import('@/views/ExactProfessions.vue')\n}, {\n  path: '/professions/:name/:prof',\n  name: 'Profession',\n  component: import('@/views/Profession.vue')\n}, {\n  path: '/edu/:city',\n  name: 'Edu',\n  component: import('@/views/Edu.vue')\n}, {\n  path: '/university/:uniName',\n  name: 'University',\n  component: import('@/views/University.vue'),\n  props: true\n}, {\n  path: '/request/:uniName',\n  name: 'Request',\n  component: import('@/views/Request.vue'),\n  props: true\n}, {\n  path: '/faq',\n  name: 'faq',\n  component: import('@/views/FAQ.vue')\n}, {\n  path: '/account',\n  name: 'Account',\n  component: import('@/views/Account.vue'),\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/history',\n  name: 'History',\n  component: import('@/views/History.vue'),\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: \"/:pathMatch(.*)*\",\n  component: import('@/views/PageNotFound.vue')\n}];\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes,\n  linkActiveClass: \"active\",\n  linkExactActiveClass: \"exact-active\"\n});\n\n// Validation for auth\n// If the user is not logged in and tries to go to special pages for users, then he redirects to the tests page\nrouter.beforeEach((to, from, next) => {\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // this route requires auth, check if logged in\n    if (!store.getters.getAuth) {\n      next({\n        name: 'tests'\n      });\n    } else {\n      next(); // go to wherever I'm going\n    }\n  } else {\n    next(); // does not require auth, make sure to always call next()!\n  }\n});\n\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","store","routes","path","redirect","name","component","props","meta","requiresAuth","router","history","process","env","BASE_URL","linkActiveClass","linkExactActiveClass","beforeEach","to","from","next","matched","some","record","getters","getAuth"],"sources":["E:/Vue/career_guidance/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router'\nimport store from \"@/store\";\n\nconst routes = [\n  {\n    path: '/',\n    redirect: '/tests'\n  },\n  {\n    path: '/tests',\n    name: 'tests',\n    component: import('@/views/Tests.vue')\n  },\n  {\n    path: '/prof',\n    name: 'prof',\n    component: import('@/views/ProfOrientation.vue')\n  },\n  {\n    path: '/test',\n    name: 'test',\n    component: import('@/views/Test.vue')\n  },\n  {\n    path: '/result',\n    name: 'result',\n    component: import('@/views/Result.vue')\n  },\n  {\n    path: '/reset',\n    name: 'reset',\n    component: import('@/views/Reset.vue')\n  },\n  {\n    path: '/professions',\n    name: 'Professions',\n    component: import('@/views/Professions.vue')\n  },\n  {\n    path: '/professions/:name',\n    name: 'Exact_Professions',\n    component: import('@/views/ExactProfessions.vue')\n  },\n  {\n    path: '/professions/:name/:prof',\n    name: 'Profession',\n    component: import('@/views/Profession.vue')\n  },\n  {\n    path: '/edu/:city',\n    name: 'Edu',\n    component: import('@/views/Edu.vue')\n  },\n  {\n    path: '/university/:uniName',\n    name: 'University',\n    component: import('@/views/University.vue'),\n    props: true\n  },\n  {\n    path: '/request/:uniName',\n    name: 'Request',\n    component: import('@/views/Request.vue'),\n    props: true\n  },\n  {\n    path: '/faq',\n    name: 'faq',\n    component: import('@/views/FAQ.vue')\n  },\n  {\n    path: '/account',\n    name: 'Account',\n    component: import('@/views/Account.vue'),\n    meta: {\n      requiresAuth: true\n    }\n  },\n  {\n    path: '/history',\n    name: 'History',\n    component: import('@/views/History.vue'),\n    meta: {\n      requiresAuth: true\n    }\n  },\n  {\n    path: \"/:pathMatch(.*)*\",\n    component: import('@/views/PageNotFound.vue')\n  }\n]\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes,\n  linkActiveClass: \"active\",\n  linkExactActiveClass: \"exact-active\",\n})\n\n// Validation for auth\n// If the user is not logged in and tries to go to special pages for users, then he redirects to the tests page\nrouter.beforeEach((to, from, next) => {\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // this route requires auth, check if logged in\n    if (!store.getters.getAuth) {\n      next({ name: 'tests' })\n    } else {\n      next() // go to wherever I'm going\n    }\n  } else {\n    next() // does not require auth, make sure to always call next()!\n  }\n})\n\nexport default router\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}