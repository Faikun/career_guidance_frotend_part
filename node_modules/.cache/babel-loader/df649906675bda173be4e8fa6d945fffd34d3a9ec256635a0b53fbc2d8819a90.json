{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"test\"\n};\nconst _hoisted_2 = {\n  class: \"test__title\"\n};\nconst _hoisted_3 = {\n  class: \"test__questionCounter\"\n};\nconst _hoisted_4 = {\n  class: \"test__question\"\n};\nconst _hoisted_5 = {\n  class: \"test__question-name\"\n};\nconst _hoisted_6 = {\n  class: \"test__question-answers\"\n};\nconst _hoisted_7 = {\n  class: \"test__passed\"\n};\nconst _hoisted_8 = {\n  class: \"test__questionNums\"\n};\nconst _hoisted_9 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_comments = _resolveComponent(\"comments\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"h1\", _hoisted_2, _toDisplayString($props.name), 1 /* TEXT */), _createTextVNode(\" \" + _toDisplayString($setup.que) + \" \", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_3, \"Вопрос \" + _toDisplayString($setup.test[$setup.questionNum].id), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, _toDisplayString($setup.test[$setup.questionNum].question), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", {\n    class: \"test__question-answer\",\n    onClick: _cache[0] || (_cache[0] = $event => $setup.nextQuestion($setup.questionNum, $setup.test[$setup.questionNum].answer_1))\n  }, _toDisplayString($setup.test[$setup.questionNum].answer_1), 1 /* TEXT */), _createElementVNode(\"div\", {\n    class: \"test__question-answer\",\n    onClick: _cache[1] || (_cache[1] = $event => $setup.nextQuestion($setup.questionNum, $setup.test[$setup.questionNum].answer_2))\n  }, _toDisplayString($setup.test[$setup.questionNum].answer_2), 1 /* TEXT */)])]), _createCommentVNode(\" ./test__question \"), _createElementVNode(\"div\", _hoisted_7, \" Вы ответили на \" + _toDisplayString($setup.checkQuestionCompleted) + \" из \" + _toDisplayString($setup.test.length) + \" вопросов \", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_8, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.test.length, num => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: _normalizeClass([$setup.test[num - 1].isAnswered ? 'active' : '', \"test__questionNum\"]),\n      onClick: $event => $setup.questionNum = num - 1\n    }, _toDisplayString(num), 11 /* TEXT, CLASS, PROPS */, _hoisted_9);\n  }), 256 /* UNKEYED_FRAGMENT */))]), _createCommentVNode(\" ./test__questionNums \")]), _createCommentVNode(\" ./test \"), _createVNode(_component_comments)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementVNode","_hoisted_1","_hoisted_2","_toDisplayString","$props","name","$setup","que","_hoisted_3","test","questionNum","id","_hoisted_4","_hoisted_5","question","_hoisted_6","onClick","_cache","$event","nextQuestion","answer_1","answer_2","_createCommentVNode","_hoisted_7","checkQuestionCompleted","length","_hoisted_8","_createElementBlock","_Fragment","_renderList","num","_normalizeClass","isAnswered","_hoisted_9","_createVNode","_component_comments"],"sources":["E:\\Vue\\career_guidance\\src\\views\\Test.vue"],"sourcesContent":["<template>\r\n<div class=\"test\">\r\n  <h1 class=\"test__title\">{{ name }}</h1>\r\n\r\n  {{ que }}\r\n\r\n  <div class=\"test__questionCounter\">Вопрос {{ test[questionNum].id }}</div>\r\n\r\n  <div class=\"test__question\">\r\n    <div class=\"test__question-name\"> {{ test[questionNum].question }} </div>\r\n    <div class=\"test__question-answers\">\r\n      <div\r\n          class=\"test__question-answer\"\r\n          @click=\"nextQuestion(questionNum, test[questionNum].answer_1)\"\r\n      >\r\n        {{ test[questionNum].answer_1 }}\r\n      </div>\r\n      <div\r\n          class=\"test__question-answer\"\r\n          @click=\"nextQuestion(questionNum, test[questionNum].answer_2)\"\r\n      >\r\n        {{ test[questionNum].answer_2 }}\r\n      </div>\r\n    </div>\r\n  </div><!-- ./test__question -->\r\n  <div class=\"test__passed\">\r\n    Вы ответили на\r\n    {{ checkQuestionCompleted }}\r\n    из {{ test.length }} вопросов\r\n  </div>\r\n  <div class=\"test__questionNums\">\r\n    <div\r\n        :class=\"test[num-1].isAnswered ? 'active': ''\"\r\n        v-for=\"num in test.length\"\r\n        @click=\"questionNum = num-1\"\r\n        class=\"test__questionNum\">{{ num }}</div>\r\n  </div><!-- ./test__questionNums -->\r\n</div><!-- ./test -->\r\n<comments></comments>\r\n</template>\r\n\r\n<script>\r\nimport {computed, ref} from \"vue\";\r\nimport router from \"@/router\";\r\nimport Comments from \"@/components/Comments.vue\";\r\nimport {useStore} from \"vuex\";\r\nimport {useRoute} from \"vue-router\";\r\n\r\nexport default {\r\n  name: \"Test\",\r\n  components: { Comments },\r\n  props: ['name'],\r\n  setup() {\r\n    let questionNum = ref(0);\r\n    const store = useStore();\r\n    const route = useRoute();\r\n    const tests = computed(() => store.getters.getTests);\r\n    const routeName = computed(() => route.params.name);\r\n    const test = tests.value.filter((el) => el.name === routeName.value)[0].questions;\r\n    let que = tests.value.filter((el) => el.name === routeName.value)[0].question;\r\n\r\n    let firstUnanswered = computed(() => test.findIndex(test => test.isAnswered === false));\r\n    let checkQuestionCompleted = computed(() => test.reduce((accumulator, currentValue) => accumulator + (currentValue.isAnswered ? 1 : 0), 0))\r\n    let nextQuestion = function (question, answer) {\r\n      if(checkQuestionCompleted.value + 1 !== test.length) {\r\n        this.test[question].isAnswered = true;\r\n        this.test[question].chosenAnswer = answer;\r\n\r\n        if (firstUnanswered.value > -1) {\r\n          questionNum.value = firstUnanswered.value;\r\n        }\r\n        else {\r\n          questionNum.value++;\r\n        }\r\n      }\r\n      else {\r\n        this.test[question].isAnswered = true;\r\n        setTimeout(() => { router.push('/result'); }, 250);\r\n      }\r\n    }\r\n    return {\r\n      questionNum,\r\n      test,\r\n      nextQuestion,\r\n      checkQuestionCompleted,\r\n      que\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":";;EACKA,KAAK,EAAC;AAAM;;EACXA,KAAK,EAAC;AAAa;;EAIlBA,KAAK,EAAC;AAAuB;;EAE7BA,KAAK,EAAC;AAAgB;;EACpBA,KAAK,EAAC;AAAqB;;EAC3BA,KAAK,EAAC;AAAwB;;EAehCA,KAAK,EAAC;AAAc;;EAKpBA,KAAK,EAAC;AAAoB;;;;6DA7BjCC,mBAAA,CAoCM,OApCNC,UAoCM,GAnCJD,mBAAA,CAAuC,MAAvCE,UAAuC,EAAAC,gBAAA,CAAZC,MAAA,CAAAC,IAAI,kB,iBAAQ,GAEvC,GAAAF,gBAAA,CAAGG,MAAA,CAAAC,GAAG,IAAG,GAET,iBAAAP,mBAAA,CAA0E,OAA1EQ,UAA0E,EAAvC,SAAO,GAAAL,gBAAA,CAAGG,MAAA,CAAAG,IAAI,CAACH,MAAA,CAAAI,WAAW,EAAEC,EAAE,kBAEjEX,mBAAA,CAgBM,OAhBNY,UAgBM,GAfJZ,mBAAA,CAAyE,OAAzEa,UAAyE,EAAAV,gBAAA,CAApCG,MAAA,CAAAG,IAAI,CAACH,MAAA,CAAAI,WAAW,EAAEI,QAAQ,kBAC/Dd,mBAAA,CAaM,OAbNe,UAaM,GAZJf,mBAAA,CAKM;IAJFD,KAAK,EAAC,uBAAuB;IAC5BiB,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEZ,MAAA,CAAAa,YAAY,CAACb,MAAA,CAAAI,WAAW,EAAEJ,MAAA,CAAAG,IAAI,CAACH,MAAA,CAAAI,WAAW,EAAEU,QAAQ;sBAE3Dd,MAAA,CAAAG,IAAI,CAACH,MAAA,CAAAI,WAAW,EAAEU,QAAQ,kBAE/BpB,mBAAA,CAKM;IAJFD,KAAK,EAAC,uBAAuB;IAC5BiB,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEZ,MAAA,CAAAa,YAAY,CAACb,MAAA,CAAAI,WAAW,EAAEJ,MAAA,CAAAG,IAAI,CAACH,MAAA,CAAAI,WAAW,EAAEW,QAAQ;sBAE3Df,MAAA,CAAAG,IAAI,CAACH,MAAA,CAAAI,WAAW,EAAEW,QAAQ,iB,KAG7BC,mBAAA,sBAAyB,EAC/BtB,mBAAA,CAIM,OAJNuB,UAIM,EAJoB,kBAExB,GAAApB,gBAAA,CAAGG,MAAA,CAAAkB,sBAAsB,IAAG,MACzB,GAAArB,gBAAA,CAAGG,MAAA,CAAAG,IAAI,CAACgB,MAAM,IAAG,YACtB,iBACAzB,mBAAA,CAMM,OANN0B,UAMM,I,kBALJC,mBAAA,CAI6CC,SAAA,QAAAC,WAAA,CAF3BvB,MAAA,CAAAG,IAAI,CAACgB,MAAM,EAAlBK,GAAG;yBAFdH,mBAAA,CAI6C;MAHxC5B,KAAK,EAAAgC,eAAA,EAAEzB,MAAA,CAAAG,IAAI,CAACqB,GAAG,MAAIE,UAAU,kBAGxB,mBAAmB;MADxBhB,OAAK,EAAAE,MAAA,IAAEZ,MAAA,CAAAI,WAAW,GAAGoB,GAAG;wBACIA,GAAG,gCAAAG,UAAA;sCAChCX,mBAAA,0BAA6B,C,GAC/BA,mBAAA,YAAe,EACrBY,YAAA,CAAqBC,mBAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}