{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock, createVNode as _createVNode, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  class: \"result\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", {\n  class: \"result__title\"\n}, \"Результаты\", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  class: \"test__completed\"\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"h4\", {\n  class: \"test__completed-bottom\"\n}, \"Профессии, которые вам подходят: \", -1 /* HOISTED */);\nconst _hoisted_5 = {\n  key: 1,\n  class: \"result__auth\"\n};\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"result__statement\"\n}, \"Чтобы увидеть результат, пожалуйста, пройдите регистрацию или войдите в свою учётную запись\", -1 /* HOISTED */);\nconst _hoisted_7 = {\n  class: \"result__auth-links\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_slider_swiper = _resolveComponent(\"slider-swiper\");\n  const _component_comments = _resolveComponent(\"comments\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"h3\", _hoisted_3, \"Поздравляем! Вы успешно сдали тест - \" + _toDisplayString($setup.finalRes.name), 1 /* TEXT */), _hoisted_4, $setup.store.getters.getAuth ? (_openBlock(), _createBlock(_component_slider_swiper, {\n    key: 0,\n    array: $setup.finalRes.result\n  }, null, 8 /* PROPS */, [\"array\"])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_hoisted_6, _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"a\", {\n    href: \"#\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.auth && $setup.auth(...args))\n  }, \"Войти в аккаунт\"), _createElementVNode(\"a\", {\n    href: \"#\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $setup.auth && $setup.auth(...args))\n  }, \"Зарегестрироваться\")])])), _createCommentVNode(\" ./result__auth \"), _createVNode(_component_comments)]), _createCommentVNode(\" ./result \")], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementVNode","_hoisted_1","_hoisted_2","_hoisted_3","_toDisplayString","$setup","finalRes","name","_hoisted_4","store","getters","getAuth","_createBlock","_component_slider_swiper","array","result","_createElementBlock","_hoisted_5","_hoisted_6","_hoisted_7","href","onClick","_cache","args","auth","_createCommentVNode","_createVNode","_component_comments"],"sources":["E:\\Vue\\career_guidance\\src\\views\\Result.vue"],"sourcesContent":["<template>\r\n<div class=\"result\">\r\n  <h1 class=\"result__title\">Результаты</h1>\r\n  <h3 class=\"test__completed\">Поздравляем! Вы успешно сдали тест - {{ finalRes.name }}</h3>\r\n  <h4 class=\"test__completed-bottom\">Профессии, которые вам подходят: </h4>\r\n\r\n  <slider-swiper\r\n      v-if=\"store.getters.getAuth\"\r\n      :array=\"finalRes.result\"\r\n  ></slider-swiper>\r\n\r\n  <div v-else class=\"result__auth\">\r\n    <div class=\"result__statement\">Чтобы увидеть результат, пожалуйста, пройдите регистрацию или войдите в свою учётную запись</div>\r\n    <div class=\"result__auth-links\">\r\n      <a href=\"#\" @click=\"auth\">Войти в аккаунт</a>\r\n      <a href=\"#\" @click=\"auth\">Зарегестрироваться</a>\r\n    </div>\r\n  </div><!-- ./result__auth -->\r\n  <comments></comments>\r\n</div><!-- ./result -->\r\n</template>\r\n\r\n<script>\r\nimport Comments from \"@/components/Comments.vue\";\r\nimport {useStore} from \"vuex\";\r\nimport {computed, watch} from \"vue\";\r\nimport {useRouter} from \"vue-router\";\r\nimport SliderSwiper from \"@/components/SliderSwiper.vue\";\r\n\r\nexport default {\r\n  name: \"Result\",\r\n  components: {SliderSwiper, Comments},\r\n  setup() {\r\n    let store = useStore();\r\n    let auth = function () {\r\n      store.commit('toggleOpenedAuth');\r\n      document.body.style.overflow = \"hidden\";\r\n    }\r\n    let finalRes = {\r\n      name: '',\r\n      result: []\r\n    };\r\n\r\n    const isAuth = computed(() => store.getters.getAuth)\r\n    const users = computed(() => store.getters.getUsers)\r\n\r\n    if(isAuth.value) {\r\n      const result = JSON.parse(localStorage.getItem('test'))\r\n      finalRes['name'] = result.name\r\n      finalRes['result'] = result.result\r\n    }\r\n\r\n    watch(isAuth, (newValue, oldValue) => {\r\n      if(newValue) {\r\n        const result = JSON.parse(localStorage.getItem('test'));\r\n        users.value.filter((el) => el.id.toString() === store.getters.getUserId)[0].history = JSON.stringify(result);\r\n        finalRes['name'] = result.name\r\n        finalRes['result'] = result.result\r\n      }\r\n    })\r\n\r\n    return {\r\n      store,\r\n      auth,\r\n      finalRes\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":";;EACKA,KAAK,EAAC;AAAQ;gCACjBC,mBAAA,CAAyC;EAArCD,KAAK,EAAC;AAAe,GAAC,YAAU;;EAChCA,KAAK,EAAC;AAAiB;gCAC3BC,mBAAA,CAAyE;EAArED,KAAK,EAAC;AAAwB,GAAC,mCAAiC;;;EAOxDA,KAAK,EAAC;;gCAChBC,mBAAA,CAAgI;EAA3HD,KAAK,EAAC;AAAmB,GAAC,6FAA2F;;EACrHA,KAAK,EAAC;AAAoB;;;;6DAZnCC,mBAAA,CAkBM,OAlBNC,UAkBM,GAjBJC,UAAyC,EACzCF,mBAAA,CAAyF,MAAzFG,UAAyF,EAA7D,uCAAqC,GAAAC,gBAAA,CAAGC,MAAA,CAAAC,QAAQ,CAACC,IAAI,kBACjFC,UAAyE,EAG/DH,MAAA,CAAAI,KAAK,CAACC,OAAO,CAACC,OAAO,I,cAD/BC,YAAA,CAGiBC,wBAAA;;IADZC,KAAK,EAAET,MAAA,CAAAC,QAAQ,CAACS;uDAGrBC,mBAAA,CAMM,OANNC,UAMM,GALJC,UAAgI,EAChIlB,mBAAA,CAGM,OAHNmB,UAGM,GAFJnB,mBAAA,CAA6C;IAA1CoB,IAAI,EAAC,GAAG;IAAEC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAElB,MAAA,CAAAmB,IAAA,IAAAnB,MAAA,CAAAmB,IAAA,IAAAD,IAAA,CAAI;KAAE,iBAAe,GACzCvB,mBAAA,CAAgD;IAA7CoB,IAAI,EAAC,GAAG;IAAEC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAElB,MAAA,CAAAmB,IAAA,IAAAnB,MAAA,CAAAmB,IAAA,IAAAD,IAAA,CAAI;KAAE,oBAAkB,E,MAE1CE,mBAAA,oBAAuB,EAC7BC,YAAA,CAAqBC,mBAAA,E,GACjBF,mBAAA,cAAiB,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}