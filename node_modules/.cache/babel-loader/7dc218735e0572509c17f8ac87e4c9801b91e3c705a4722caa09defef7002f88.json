{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"test__questionCounter\"\n};\nconst _hoisted_2 = {\n  class: \"test__question\"\n};\nconst _hoisted_3 = {\n  class: \"test__question-name\"\n};\nconst _hoisted_4 = {\n  class: \"test__question-answers\"\n};\nconst _hoisted_5 = {\n  class: \"test__question-answer\"\n};\nconst _hoisted_6 = {\n  class: \"test__passed\"\n};\nconst _hoisted_7 = {\n  class: \"test__questionNums\"\n};\nconst _hoisted_8 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, \"Вопрос \" + _toDisplayString($setup.questionNum), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, _toDisplayString($setup.test[$setup.questionNum].question), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.test.answer, answer => {\n    return _openBlock(), _createElementBlock(\"div\", _hoisted_5);\n  }), 256 /* UNKEYED_FRAGMENT */))])]), _createCommentVNode(\" ./test__question \"), _createElementVNode(\"div\", _hoisted_6, \" Вы ответили на \" + _toDisplayString($setup.checkQuestionCompleted) + \" из \" + _toDisplayString($setup.test.length) + \" вопросов \", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.test.length, num => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: _normalizeClass([$setup.test[num - 1].isAnswered ? 'active' : '', \"test__questionNum\"]),\n      onClick: $event => $setup.questionNum = num - 1\n    }, _toDisplayString(num), 11 /* TEXT, CLASS, PROPS */, _hoisted_8);\n  }), 256 /* UNKEYED_FRAGMENT */))]), _createCommentVNode(\" ./test__questionNums \")], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementVNode","_hoisted_1","_toDisplayString","$setup","questionNum","_hoisted_2","_hoisted_3","test","question","_hoisted_4","_createElementBlock","_Fragment","_renderList","answer","_hoisted_5","_createCommentVNode","_hoisted_6","checkQuestionCompleted","length","_hoisted_7","num","_normalizeClass","isAnswered","onClick","$event","_hoisted_8"],"sources":["E:\\Vue\\career_guidance\\src\\components\\TestTemplate.vue"],"sourcesContent":["<template>\r\n  <div class=\"test__questionCounter\">Вопрос {{ questionNum }}</div>\r\n\r\n  <div class=\"test__question\">\r\n    <div class=\"test__question-name\"> {{ test[questionNum].question }} </div>\r\n    <div class=\"test__question-answers\">\r\n      <div\r\n          class=\"test__question-answer\"\r\n          v-for=\"answer in test.answer\"\r\n      >\r\n\r\n      </div>\r\n    </div>\r\n  </div><!-- ./test__question -->\r\n  <div class=\"test__passed\">\r\n    Вы ответили на\r\n    {{ checkQuestionCompleted }}\r\n    из {{ test.length }} вопросов\r\n  </div>\r\n  <div class=\"test__questionNums\">\r\n    <div\r\n        :class=\"test[num-1].isAnswered ? 'active': ''\"\r\n        v-for=\"num in test.length\"\r\n        @click=\"questionNum = num-1\"\r\n        class=\"test__questionNum\">{{ num }}</div>\r\n  </div><!-- ./test__questionNums -->\r\n</template>\r\n\r\n<script>\r\nimport {computed, ref} from \"vue\";\r\nimport {useStore} from \"vuex\";\r\nimport {useRoute} from \"vue-router\";\r\nimport router from \"@/router\";\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"TestTemplate\",\r\n  async setup() {\r\n    let questionNum = ref(0);\r\n    const store = useStore();\r\n    const route = useRoute();\r\n    await store.dispatch(\"initialQuestionList\");\r\n\r\n    const tests = computed(() => store.getters.getTests);\r\n    const routeName = computed(() => route.params.name);\r\n    const test = tests.value.filter((el) => el.name === routeName.value)[0].questions;\r\n\r\n    let firstUnanswered = computed(() => test.findIndex(test => test.isAnswered === false));\r\n    let checkQuestionCompleted = computed(() => test.reduce((accumulator, currentValue) => accumulator + (currentValue.isAnswered ? 1 : 0), 0))\r\n    let nextQuestion = function (question, answer) {\r\n      if(checkQuestionCompleted.value + 1 !== test.length) {\r\n        this.test[question].isAnswered = true;\r\n        this.test[question].chosenAnswer = answer;\r\n\r\n        if (firstUnanswered.value > -1) {\r\n          questionNum.value = firstUnanswered.value;\r\n        }\r\n        else {\r\n          questionNum.value++;\r\n        }\r\n      }\r\n      else {\r\n        this.test[question].isAnswered = true;\r\n        setTimeout(() => { router.push('/result'); }, 250);\r\n      }\r\n    }\r\n    return {\r\n      questionNum,\r\n      test,\r\n      nextQuestion,\r\n      checkQuestionCompleted\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAuB;;EAE7BA,KAAK,EAAC;AAAgB;;EACpBA,KAAK,EAAC;AAAqB;;EAC3BA,KAAK,EAAC;AAAwB;;EAE7BA,KAAK,EAAC;AAAuB;;EAOhCA,KAAK,EAAC;AAAc;;EAKpBA,KAAK,EAAC;AAAoB;;;6DAlB/BC,mBAAA,CAAiE,OAAjEC,UAAiE,EAA9B,SAAO,GAAAC,gBAAA,CAAGC,MAAA,CAAAC,WAAW,kBAExDJ,mBAAA,CAUM,OAVNK,UAUM,GATJL,mBAAA,CAAyE,OAAzEM,UAAyE,EAAAJ,gBAAA,CAApCC,MAAA,CAAAI,IAAI,CAACJ,MAAA,CAAAC,WAAW,EAAEI,QAAQ,kBAC/DR,mBAAA,CAOM,OAPNS,UAOM,I,kBANJC,mBAAA,CAKMC,SAAA,QAAAC,WAAA,CAHeT,MAAA,CAAAI,IAAI,CAACM,MAAM,EAArBA,MAAM;yBAFjBH,mBAAA,CAKM,OALNI,UAKM;wCAEJC,mBAAA,sBAAyB,EAC/Bf,mBAAA,CAIM,OAJNgB,UAIM,EAJoB,kBAExB,GAAAd,gBAAA,CAAGC,MAAA,CAAAc,sBAAsB,IAAG,MACzB,GAAAf,gBAAA,CAAGC,MAAA,CAAAI,IAAI,CAACW,MAAM,IAAG,YACtB,iBACAlB,mBAAA,CAMM,OANNmB,UAMM,I,kBALJT,mBAAA,CAI6CC,SAAA,QAAAC,WAAA,CAF3BT,MAAA,CAAAI,IAAI,CAACW,MAAM,EAAlBE,GAAG;yBAFdV,mBAAA,CAI6C;MAHxCX,KAAK,EAAAsB,eAAA,EAAElB,MAAA,CAAAI,IAAI,CAACa,GAAG,MAAIE,UAAU,kBAGxB,mBAAmB;MADxBC,OAAK,EAAAC,MAAA,IAAErB,MAAA,CAAAC,WAAW,GAAGgB,GAAG;wBACIA,GAAG,gCAAAK,UAAA;sCAChCV,mBAAA,0BAA6B,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}