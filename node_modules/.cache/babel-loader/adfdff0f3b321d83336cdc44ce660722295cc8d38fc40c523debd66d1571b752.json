{"ast":null,"code":"import { createRouter, createWebHistory } from 'vue-router';\nimport Tests from \"@/views/Tests.vue\";\nimport ProfOrientation from \"@/views/ProfOrientation.vue\";\nimport Test from \"@/views/Test.vue\";\nimport Result from \"@/views/Result.vue\";\nimport PageNotFound from \"@/views/PageNotFound.vue\";\nimport Reset from \"@/views/Reset.vue\";\nimport FAQ from \"@/views/FAQ.vue\";\nimport Professions from \"@/views/Professions.vue\";\nimport exactProfessions from \"@/views/ExactProfessions.vue\";\nimport Profession from \"@/views/Profession.vue\";\nimport Account from \"@/views/Account.vue\";\nimport store from \"@/store\";\nimport History from \"@/views/History.vue\";\nimport Edu from \"@/views/Edu.vue\";\nconst routes = [{\n  path: '/',\n  redirect: '/tests'\n}, {\n  path: '/tests',\n  name: 'tests',\n  component: Tests\n}, {\n  path: '/prof',\n  name: 'prof',\n  component: ProfOrientation\n}, {\n  path: '/test',\n  name: 'test',\n  component: Test\n}, {\n  path: '/result',\n  name: 'result',\n  component: Result\n}, {\n  path: '/reset',\n  name: 'reset',\n  component: Reset\n}, {\n  path: '/professions',\n  name: 'Professions',\n  component: Professions\n}, {\n  path: '/professions/:name',\n  name: 'Exact_Professions',\n  component: exactProfessions\n}, {\n  path: '/professions/:name/:prof',\n  name: 'Profession',\n  component: Profession\n}, {\n  path: '/edu/:city',\n  name: 'Edu',\n  component: Edu\n}, {\n  path: '/faq',\n  name: 'faq',\n  component: FAQ\n}, {\n  path: '/account',\n  name: 'Account',\n  component: Account,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/history',\n  name: 'History',\n  component: History,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: \"/:pathMatch(.*)*\",\n  component: PageNotFound\n}];\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes,\n  linkActiveClass: \"active\",\n  linkExactActiveClass: \"exact-active\"\n});\n\n// Validation for auth\n// If the user is not logged in and tries to go to special pages for users, then he redirects to the tests page\nrouter.beforeEach((to, from, next) => {\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // this route requires auth, check if logged in\n    if (!store.getters.getAuth) {\n      next({\n        name: 'tests'\n      });\n    } else {\n      next(); // go to wherever I'm going\n    }\n  } else {\n    next(); // does not require auth, make sure to always call next()!\n  }\n});\n\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","Tests","ProfOrientation","Test","Result","PageNotFound","Reset","FAQ","Professions","exactProfessions","Profession","Account","store","History","Edu","routes","path","redirect","name","component","meta","requiresAuth","router","history","process","env","BASE_URL","linkActiveClass","linkExactActiveClass","beforeEach","to","from","next","matched","some","record","getters","getAuth"],"sources":["E:/Vue/career_guidance/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router'\nimport Tests from \"@/views/Tests.vue\";\nimport ProfOrientation from \"@/views/ProfOrientation.vue\";\nimport Test from \"@/views/Test.vue\";\nimport Result from \"@/views/Result.vue\";\nimport PageNotFound from \"@/views/PageNotFound.vue\";\nimport Reset from \"@/views/Reset.vue\";\nimport FAQ from \"@/views/FAQ.vue\";\nimport Professions from \"@/views/Professions.vue\";\nimport exactProfessions from \"@/views/ExactProfessions.vue\";\nimport Profession from \"@/views/Profession.vue\";\nimport Account from \"@/views/Account.vue\";\nimport store from \"@/store\";\nimport History from \"@/views/History.vue\";\nimport Edu from \"@/views/Edu.vue\";\n\nconst routes = [\n  {\n    path: '/',\n    redirect: '/tests'\n  },\n  {\n    path: '/tests',\n    name: 'tests',\n    component: Tests\n  },\n  {\n    path: '/prof',\n    name: 'prof',\n    component: ProfOrientation\n  },\n  {\n    path: '/test',\n    name: 'test',\n    component: Test\n  },\n  {\n    path: '/result',\n    name: 'result',\n    component: Result\n  },\n  {\n    path: '/reset',\n    name: 'reset',\n    component: Reset\n  },\n  {\n    path: '/professions',\n    name: 'Professions',\n    component: Professions\n  },\n  {\n    path: '/professions/:name',\n    name: 'Exact_Professions',\n    component: exactProfessions\n  },\n  {\n    path: '/professions/:name/:prof',\n    name: 'Profession',\n    component: Profession\n  },\n  {\n    path: '/edu/:city',\n    name: 'Edu',\n    component: Edu\n  },\n  {\n    path: '/faq',\n    name: 'faq',\n    component: FAQ\n  },\n  {\n    path: '/account',\n    name: 'Account',\n    component: Account,\n    meta: {\n      requiresAuth: true\n    }\n  },\n  {\n    path: '/history',\n    name: 'History',\n    component: History,\n    meta: {\n      requiresAuth: true\n    }\n  },\n  {\n    path: \"/:pathMatch(.*)*\",\n    component: PageNotFound\n  }\n]\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes,\n  linkActiveClass: \"active\",\n  linkExactActiveClass: \"exact-active\",\n})\n\n// Validation for auth\n// If the user is not logged in and tries to go to special pages for users, then he redirects to the tests page\nrouter.beforeEach((to, from, next) => {\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    // this route requires auth, check if logged in\n    if (!store.getters.getAuth) {\n      next({ name: 'tests' })\n    } else {\n      next() // go to wherever I'm going\n    }\n  } else {\n    next() // does not require auth, make sure to always call next()!\n  }\n})\n\nexport default router\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}