{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, withKeys as _withKeys, vModelText as _vModelText, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass } from \"vue\";\nimport _imports_0 from '../images/png/ArrowToRightBlue.png';\nimport _imports_1 from '../images/png/Star-black.png';\nimport _imports_2 from '../images/png/mdi_like.png';\nimport _imports_3 from '../images/png/mdi_dislike.png';\nconst _hoisted_1 = {\n  key: 0,\n  class: \"comments\"\n};\nconst _hoisted_2 = {\n  class: \"comments__title\"\n};\nconst _hoisted_3 = {\n  class: \"comments__leaveAComment\"\n};\nconst _hoisted_4 = {\n  class: \"comments__stars\"\n};\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"5\"\n}, \"☆\", -1 /* HOISTED */);\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"4\"\n}, \"☆\", -1 /* HOISTED */);\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"3\"\n}, \"☆\", -1 /* HOISTED */);\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"2\"\n}, \"☆\", -1 /* HOISTED */);\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"1\"\n}, \"☆\", -1 /* HOISTED */);\nconst _hoisted_10 = {\n  class: \"comments__input\"\n};\nconst _hoisted_11 = {\n  class: \"comments__list\"\n};\nconst _hoisted_12 = {\n  class: \"comments__user\"\n};\nconst _hoisted_13 = {\n  class: \"comments__user-name\"\n};\nconst _hoisted_14 = {\n  class: \"comments__user-date\"\n};\nconst _hoisted_15 = {\n  class: \"comments__user-stars\"\n};\nconst _hoisted_16 = {\n  src: _imports_1,\n  alt: \"star\"\n};\nconst _hoisted_17 = {\n  class: \"comments__item-text\"\n};\nconst _hoisted_18 = {\n  class: \"comments__item-interaction\"\n};\nconst _hoisted_19 = [\"onClick\"];\nconst _hoisted_20 = {\n  class: \"comments__item-response\"\n};\nconst _hoisted_21 = {\n  class: \"comments__item-likes\"\n};\nconst _hoisted_22 = [\"onClick\"];\nconst _hoisted_23 = {\n  class: \"comments__item-dislikes\"\n};\nconst _hoisted_24 = [\"onClick\"];\nconst _hoisted_25 = {\n  key: 0,\n  class: \"comments__answer\"\n};\nconst _hoisted_26 = [\"onUpdate:modelValue\"];\nconst _hoisted_27 = [\"onClick\"];\nconst _hoisted_28 = {\n  class: \"comments__user\"\n};\nconst _hoisted_29 = {\n  class: \"comments__user-name\"\n};\nconst _hoisted_30 = {\n  class: \"comments__user-date\"\n};\nconst _hoisted_31 = {\n  class: \"comments__item-text\"\n};\nconst _hoisted_32 = {\n  class: \"comments__item-interaction\"\n};\nconst _hoisted_33 = {\n  class: \"comments__item-response\"\n};\nconst _hoisted_34 = {\n  class: \"comments__item-likes\"\n};\nconst _hoisted_35 = [\"onClick\"];\nconst _hoisted_36 = {\n  class: \"comments__item-dislikes\"\n};\nconst _hoisted_37 = [\"onClick\"];\nconst _hoisted_38 = /*#__PURE__*/_createElementVNode(\"div\", null, \"Комменатрии грузятся\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return $setup.commentsArray.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h2\", _hoisted_2, \"Поделитесь со своми впечатлениями (\" + _toDisplayString($setup.commentsArray.length) + \")\", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"span\", _hoisted_4, [_createElementVNode(\"input\", {\n    type: \"radio\",\n    name: \"rating\",\n    value: \"5\",\n    id: \"5\",\n    onClick: _cache[0] || (_cache[0] = $event => $setup.starSave($event.target.value))\n  }), _hoisted_5, _createElementVNode(\"input\", {\n    type: \"radio\",\n    name: \"rating\",\n    value: \"4\",\n    id: \"4\",\n    onClick: _cache[1] || (_cache[1] = $event => $setup.starSave($event.target.value))\n  }), _hoisted_6, _createElementVNode(\"input\", {\n    type: \"radio\",\n    name: \"rating\",\n    value: \"3\",\n    id: \"3\",\n    onClick: _cache[2] || (_cache[2] = $event => $setup.starSave($event.target.value))\n  }), _hoisted_7, _createElementVNode(\"input\", {\n    type: \"radio\",\n    name: \"rating\",\n    value: \"2\",\n    id: \"2\",\n    onClick: _cache[3] || (_cache[3] = $event => $setup.starSave($event.target.value))\n  }), _hoisted_8, _createElementVNode(\"input\", {\n    type: \"radio\",\n    name: \"rating\",\n    value: \"1\",\n    id: \"1\",\n    onClick: _cache[4] || (_cache[4] = $event => $setup.starSave($event.target.value))\n  }), _hoisted_9]), _createElementVNode(\"div\", _hoisted_10, [_withDirectives(_createElementVNode(\"input\", {\n    class: \"comments__input-input\",\n    type: \"text\",\n    placeholder: \"Напишите комментарий\",\n    onKeyup: _cache[5] || (_cache[5] = _withKeys((...args) => $setup.leaveAComment && $setup.leaveAComment(...args), [\"enter\"])),\n    \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => $setup.inputComment = $event)\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelText, $setup.inputComment, void 0, {\n    trim: true\n  }]]), _createElementVNode(\"img\", {\n    class: \"comments__input-img\",\n    src: _imports_0,\n    alt: \"arrow\",\n    onClick: _cache[7] || (_cache[7] = (...args) => $setup.leaveAComment && $setup.leaveAComment(...args))\n  })])]), _createCommentVNode(\" ./comments__leaveAComment \"), _createElementVNode(\"div\", _hoisted_11, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(Object.values($setup.commentsArray), (comment, idx) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"comments__item\",\n      key: comment\n    }, [_createElementVNode(\"div\", _hoisted_12, [_createElementVNode(\"div\", _hoisted_13, _toDisplayString(comment.user), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_14, _toDisplayString(comment.date), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_15, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(parseInt(comment.stars), item => {\n      return _openBlock(), _createElementBlock(\"img\", _hoisted_16);\n    }), 256 /* UNKEYED_FRAGMENT */))])]), _createCommentVNode(\" ./comments__user \"), _createElementVNode(\"div\", _hoisted_17, _toDisplayString(comment.comment), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_18, [_createElementVNode(\"div\", {\n      class: \"comments__item-answer\",\n      onClick: $event => $setup.openInput(comment)\n    }, \"Ответить\", 8 /* PROPS */, _hoisted_19), _createElementVNode(\"div\", _hoisted_20, [_createElementVNode(\"div\", _hoisted_21, [_createElementVNode(\"img\", {\n      onClick: $event => $setup.putLikeDis(comment, comment.usersIdLikes, comment.usersIdDislikes, 'liked', 'disliked', idx),\n      class: _normalizeClass([\"comments__item-interactionImage\", comment.liked ? 'active' : '']),\n      src: _imports_2,\n      alt: \"likes\"\n    }, null, 10 /* CLASS, PROPS */, _hoisted_22), _createElementVNode(\"span\", null, _toDisplayString(comment.usersIdLikes.count), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_23, [_createElementVNode(\"img\", {\n      onClick: $event => $setup.putLikeDis(comment, comment.usersIdDislikes, comment.usersIdLikes, 'disliked', 'liked', idx),\n      class: _normalizeClass([\"comments__item-interactionImage\", comment.disliked ? 'active' : '']),\n      src: _imports_3,\n      alt: \"dislike\"\n    }, null, 10 /* CLASS, PROPS */, _hoisted_24), _createElementVNode(\"span\", null, _toDisplayString(comment.usersIdDislikes.count), 1 /* TEXT */)]), _createCommentVNode(\" ./comments__item-dislikes \")]), _createCommentVNode(\" ./comments__item-response \")]), _createCommentVNode(\" ./comments__item-interaction \"), comment.openedInput ? (_openBlock(), _createElementBlock(\"div\", _hoisted_25, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"text\",\n      \"onUpdate:modelValue\": $event => comment.inputValue = $event\n    }, null, 8 /* PROPS */, _hoisted_26), [[_vModelText, comment.inputValue, void 0, {\n      trim: true\n    }]]), _createElementVNode(\"button\", {\n      type: \"button\",\n      onClick: $event => $setup.answerComment(comment)\n    }, \"Ответить\", 8 /* PROPS */, _hoisted_27)])) : _createCommentVNode(\"v-if\", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(comment.answered, answered => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        class: \"comments__response\",\n        key: answered\n      }, [_createElementVNode(\"div\", _hoisted_28, [_createElementVNode(\"div\", _hoisted_29, _toDisplayString(answered.user), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_30, _toDisplayString(answered.date), 1 /* TEXT */)]), _createCommentVNode(\" ./comments__user \"), _createElementVNode(\"div\", _hoisted_31, _toDisplayString(answered.comment), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_32, [_createElementVNode(\"div\", _hoisted_33, [_createElementVNode(\"div\", _hoisted_34, [_createElementVNode(\"img\", {\n        onClick: $event => $setup.putLikeDis(answered, answered.usersIdLikes, answered.usersIdDislikes, 'liked', 'disliked', idx),\n        class: _normalizeClass([\"comments__item-interactionImage\", answered.liked ? 'active' : '']),\n        src: _imports_2,\n        alt: \"likes\"\n      }, null, 10 /* CLASS, PROPS */, _hoisted_35), _createElementVNode(\"span\", null, _toDisplayString(answered.usersIdLikes.count), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_36, [_createElementVNode(\"img\", {\n        onClick: $event => $setup.putLikeDis(answered, answered.usersIdDislikes, answered.usersIdLikes, 'disliked', 'liked', idx),\n        class: _normalizeClass([\"comments__item-interactionImage\", answered.disliked ? 'active' : '']),\n        src: _imports_3,\n        alt: \"dislike\"\n      }, null, 10 /* CLASS, PROPS */, _hoisted_37), _createElementVNode(\"span\", null, _toDisplayString(answered.usersIdDislikes.count), 1 /* TEXT */)]), _createCommentVNode(\" ./comments__item-dislikes \")]), _createCommentVNode(\" ./comments__item-response \")]), _createCommentVNode(\" ./comments__item-interaction \")]);\n    }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\"./comments__response \")]);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" ./comments__item \")]), _createCommentVNode(\" ./comments__list \")])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" ./comments \"), _hoisted_38], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */));\n}","map":{"version":3,"names":["_imports_0","_imports_1","_imports_2","_imports_3","class","_createElementVNode","for","src","alt","$setup","commentsArray","length","_createElementBlock","_hoisted_1","_hoisted_2","_toDisplayString","_hoisted_3","_hoisted_4","type","name","value","id","onClick","_cache","$event","starSave","target","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","placeholder","onKeyup","_withKeys","args","leaveAComment","inputComment","_createCommentVNode","_hoisted_11","_Fragment","_renderList","Object","values","comment","idx","key","_hoisted_12","_hoisted_13","user","_hoisted_14","date","_hoisted_15","parseInt","stars","item","_hoisted_16","_hoisted_17","_hoisted_18","openInput","_hoisted_19","_hoisted_20","_hoisted_21","putLikeDis","usersIdLikes","usersIdDislikes","_normalizeClass","liked","count","_hoisted_23","disliked","openedInput","_hoisted_25","inputValue","answerComment","_hoisted_27","answered","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","_hoisted_36","_hoisted_38"],"sources":["E:\\Vue\\career_guidance\\src\\components\\Comments.vue"],"sourcesContent":["<template>\r\n<div class=\"comments\" v-if=\"commentsArray.length > 0\">\r\n  <h2 class=\"comments__title\">Поделитесь со своми впечатлениями ({{ commentsArray.length }})</h2>\r\n  <div class=\"comments__leaveAComment\">\r\n    <span class=\"comments__stars\">\r\n      <input type=\"radio\" name=\"rating\" value=\"5\" id=\"5\" @click=\"starSave($event.target.value)\"><label for=\"5\">☆</label>\r\n      <input type=\"radio\" name=\"rating\" value=\"4\" id=\"4\" @click=\"starSave($event.target.value)\"><label for=\"4\">☆</label>\r\n      <input type=\"radio\" name=\"rating\" value=\"3\" id=\"3\" @click=\"starSave($event.target.value)\"><label for=\"3\">☆</label>\r\n      <input type=\"radio\" name=\"rating\" value=\"2\" id=\"2\" @click=\"starSave($event.target.value)\"><label for=\"2\">☆</label>\r\n      <input type=\"radio\" name=\"rating\" value=\"1\" id=\"1\" @click=\"starSave($event.target.value)\"><label for=\"1\">☆</label>\r\n    </span>\r\n    <div class=\"comments__input\">\r\n      <input\r\n          class=\"comments__input-input\"\r\n          type=\"text\"\r\n          placeholder=\"Напишите комментарий\"\r\n          v-on:keyup.enter=\"leaveAComment\"\r\n          v-model.trim=\"inputComment\"\r\n      >\r\n      <img\r\n          class=\"comments__input-img\"\r\n          src=\"../images/png/ArrowToRightBlue.png\"\r\n          alt=\"arrow\"\r\n          @click=\"leaveAComment\"\r\n      >\r\n    </div>\r\n  </div><!-- ./comments__leaveAComment -->\r\n  <div class=\"comments__list\">\r\n    <div class=\"comments__item\" v-for=\"(comment, idx) in Object.values(commentsArray)\" :key=\"comment\">\r\n      <div class=\"comments__user\">\r\n        <div class=\"comments__user-name\">{{ comment.user }}</div>\r\n        <div class=\"comments__user-date\">{{ comment.date }}</div>\r\n        <div class=\"comments__user-stars\">\r\n          <img src=\"../images/png/Star-black.png\" alt=\"star\" v-for=\"item in parseInt(comment.stars)\">\r\n        </div>\r\n      </div><!-- ./comments__user -->\r\n      <div class=\"comments__item-text\">{{ comment.comment }}</div>\r\n      <div class=\"comments__item-interaction\">\r\n        <div class=\"comments__item-answer\" @click=\"openInput(comment)\">Ответить</div>\r\n        <div class=\"comments__item-response\">\r\n          <div class=\"comments__item-likes\">\r\n            <img\r\n                @click=\"putLikeDis(comment, comment.usersIdLikes, comment.usersIdDislikes, 'liked', 'disliked', idx)\"\r\n                class=\"comments__item-interactionImage\"\r\n                :class=\"comment.liked ? 'active' : ''\"\r\n                src=\"../images/png/mdi_like.png\"\r\n                alt=\"likes\">\r\n            <span>{{ comment.usersIdLikes.count }}</span>\r\n          </div>\r\n          <div class=\"comments__item-dislikes\">\r\n            <img\r\n                @click=\"putLikeDis(comment, comment.usersIdDislikes, comment.usersIdLikes, 'disliked', 'liked', idx)\"\r\n                class=\"comments__item-interactionImage\"\r\n                :class=\"comment.disliked ? 'active' : ''\"\r\n                src=\"../images/png/mdi_dislike.png\"\r\n                alt=\"dislike\">\r\n            <span>{{ comment.usersIdDislikes.count }}</span>\r\n          </div><!-- ./comments__item-dislikes -->\r\n        </div><!-- ./comments__item-response -->\r\n      </div><!-- ./comments__item-interaction -->\r\n\r\n      <div class=\"comments__answer\" v-if=\"comment.openedInput\">\r\n        <input type=\"text\" v-model.trim=\"comment.inputValue\">\r\n        <button type=\"button\" @click=\"answerComment(comment)\">Ответить</button>\r\n      </div>\r\n\r\n      <div class=\"comments__response\" v-for=\"answered in comment.answered\" :key=\"answered\">\r\n        <div class=\"comments__user\">\r\n          <div class=\"comments__user-name\">{{ answered.user }}</div>\r\n          <div class=\"comments__user-date\">{{ answered.date }}</div>\r\n        </div><!-- ./comments__user -->\r\n        <div class=\"comments__item-text\">{{ answered.comment }}</div>\r\n        <div class=\"comments__item-interaction\">\r\n          <div class=\"comments__item-response\">\r\n            <div class=\"comments__item-likes\">\r\n              <img\r\n                  @click=\"putLikeDis(answered, answered.usersIdLikes, answered.usersIdDislikes, 'liked', 'disliked', idx)\"\r\n                  class=\"comments__item-interactionImage\"\r\n                  :class=\"answered.liked ? 'active' : ''\"\r\n                  src=\"../images/png/mdi_like.png\"\r\n                  alt=\"likes\">\r\n              <span>{{ answered.usersIdLikes.count }}</span>\r\n            </div>\r\n            <div class=\"comments__item-dislikes\">\r\n              <img\r\n                  @click=\"putLikeDis(answered, answered.usersIdDislikes, answered.usersIdLikes, 'disliked', 'liked', idx)\"\r\n                  class=\"comments__item-interactionImage\"\r\n                  :class=\"answered.disliked ? 'active' : ''\"\r\n                  src=\"../images/png/mdi_dislike.png\"\r\n                  alt=\"dislike\">\r\n              <span>{{ answered.usersIdDislikes.count }}</span>\r\n            </div><!-- ./comments__item-dislikes -->\r\n          </div><!-- ./comments__item-response -->\r\n        </div><!-- ./comments__item-interaction -->\r\n      </div><!--./comments__response -->\r\n\r\n    </div><!-- ./comments__item -->\r\n  </div><!-- ./comments__list -->\r\n</div><!-- ./comments -->\r\n<div v-else>Комменатрии грузятся</div>\r\n</template>\r\n\r\n<script>\r\nimport {computed, onMounted, ref} from \"vue\";\r\nimport {useStore} from \"vuex\";\r\n\r\nexport default {\r\n  name: \"Comments\",\r\n  setup () {\r\n    const store = useStore()\r\n    onMounted(async () => {\r\n      await store.dispatch('initialCommentsList')\r\n      console.log('mounted')\r\n    })\r\n\r\n    const today = new Date();\r\n    const yyyy = today.getFullYear();\r\n    let mm = today.getMonth() + 1;\r\n    let dd = today.getDate();\r\n    if (dd < 10) dd = '0' + dd;\r\n    if (mm < 10) mm = '0' + mm;\r\n    const formattedToday = dd + '-' + mm + '-' + yyyy;\r\n\r\n    let starsCount = ref(0);\r\n    let inputComment = ref('');\r\n\r\n    let starSave = function (star) {\r\n      starsCount.value = star;\r\n    }\r\n\r\n    const saveData = async function (main, mainInter) {\r\n      let bodyResult = {}\r\n\r\n      if(main === 'liked') {\r\n        bodyResult = {\r\n          userIdLikes: {\r\n            count: mainInter.count,\r\n            users: mainInter.users,\r\n            liked: true,\r\n            disliked: false\r\n          }\r\n        }\r\n      }\r\n      else if(main === 'disliked') {\r\n        bodyResult = {\r\n          userIdLikes: {\r\n            count: mainInter.count,\r\n            users: mainInter.users,\r\n            disliked: true,\r\n            liked: false\r\n          }\r\n        }\r\n      }\r\n      await fetch('https://proffesion-choose-default-rtdb.firebaseio.com/' + commentsKeys[idx], {\r\n        method: 'PUT',\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(bodyResult)\r\n      })\r\n    }\r\n\r\n    let putLikeDis = async function (comment, mainInter, oppositeInter, main, reverse, idx) {\r\n      let userId = parseInt(store.getters.getUserId)\r\n      if (store.getters.getAuth) {\r\n        if (mainInter.users?.indexOf(userId) == -1 && oppositeInter.users?.indexOf(userId) == -1) {\r\n          mainInter.count += 1\r\n          mainInter.users.push(userId);\r\n          comment[main.replace(/'/g)] = true;\r\n          let bodyResult = {}\r\n\r\n          if(main === 'liked') {\r\n            bodyResult = {\r\n              userIdLikes: {\r\n                count: mainInter.count,\r\n                users: mainInter.users,\r\n                liked: true,\r\n                disliked: false\r\n              }\r\n            }\r\n          }\r\n          else if(main === 'disliked') {\r\n            bodyResult = {\r\n              userIdLikes: {\r\n                count: mainInter.count,\r\n                users: mainInter.users,\r\n                disliked: true,\r\n                liked: false\r\n              }\r\n            }\r\n          }\r\n          await fetch('https://proffesion-choose-default-rtdb.firebaseio.com/' + commentsKeys[idx], {\r\n            method: 'PUT',\r\n            headers: {\r\n              \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(bodyResult)\r\n          })\r\n        }\r\n        else if (mainInter.users == undefined) {\r\n          if(oppositeInter.users != undefined) {\r\n            oppositeInter.users.splice(oppositeInter.users.findIndex(id => id === userId), 1);\r\n            oppositeInter.count -= 1\r\n            comment[reverse.replace(/'/g)] = false;\r\n          }\r\n          mainInter.users = [parseInt(userId)]\r\n          mainInter.count += 1\r\n          comment[main.replace(/'/g)] = true;\r\n\r\n          let bodyResult = {}\r\n\r\n          if(main === 'liked') {\r\n            bodyResult = {\r\n              userIdLikes: {\r\n                count: mainInter.count,\r\n                users: mainInter.users,\r\n                liked: true,\r\n                disliked: false\r\n              }\r\n            }\r\n          }\r\n          else if(main === 'disliked') {\r\n            bodyResult = {\r\n              userIdLikes: {\r\n                count: mainInter.count,\r\n                users: mainInter.users,\r\n                disliked: true,\r\n                liked: false\r\n              }\r\n            }\r\n          }\r\n          await fetch('https://proffesion-choose-default-rtdb.firebaseio.com/' + commentsKeys[idx], {\r\n            method: 'PUT',\r\n            headers: {\r\n              \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(bodyResult)\r\n          })\r\n        }\r\n        else if (mainInter.users?.indexOf(userId) == -1 && oppositeInter.users?.indexOf(userId) != -1) {\r\n          mainInter.count += 1\r\n          mainInter.users.push(userId);\r\n          if (oppositeInter.users != undefined) {\r\n            oppositeInter.users.splice(oppositeInter.users.findIndex(id => id === userId), 1);\r\n            oppositeInter.count -= 1\r\n          }\r\n\r\n          comment[main.replace(/'/g)] = true;\r\n          comment[reverse.replace(/'/g)] = false;\r\n        }\r\n        else if (mainInter.users?.indexOf(userId) != -1 && (oppositeInter.users == undefined || oppositeInter.users?.indexOf(userId) == -1)) {\r\n          mainInter.users.splice(mainInter.users.findIndex(id => id === userId), 1)\r\n          mainInter.count -= 1\r\n          comment[main.replace(/'/g)] = false;\r\n        }\r\n      }\r\n      else {\r\n        store.commit('toggleOpenedAuth');\r\n        document.body.style.overflow = \"hidden\";\r\n        document.documentElement.scrollTop = 0;\r\n      }\r\n    };\r\n\r\n    let leaveAComment = async function () {\r\n      if(store.getters.getAuth) {\r\n        if(inputComment.value !== '' && starsCount.value !== 0) {\r\n          let userName = store.getters.getUsers\r\n              .filter((el) => el.id === parseInt(store.getters.getUserId))\r\n              .map(map => map.username).toString();\r\n          const response = await fetch('https://proffesion-choose-default-rtdb.firebaseio.com/comments.json', {\r\n            method: 'POST',\r\n            headers: {\r\n              \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n              user: userName,\r\n              date: formattedToday,\r\n              stars: starsCount.value,\r\n              comment: inputComment.value,\r\n              usersIdLikes: {'count': 0, users: []},\r\n              usersIdDislikes: {'count': 0, users: []},\r\n              liked: false,\r\n              disliked: false,\r\n              openedInput: false,\r\n              inputValue: '',\r\n              answered: []\r\n            })\r\n          }).then(res => {\r\n            if (res.ok) {\r\n              console.log('Успешно')\r\n            }\r\n          })\r\n          await store.dispatch('initialCommentsList')\r\n          inputComment.value = ''\r\n        }\r\n        else {\r\n          alert('Пожалуйста, напишите комментарий и оцените тест по 5-и бальной шкале')\r\n        }\r\n      }\r\n      else {\r\n        store.commit('toggleOpenedAuth');\r\n        document.body.style.overflow = \"hidden\";\r\n        document.documentElement.scrollTop = 0;\r\n      }\r\n    }\r\n\r\n    let openInput = (comment) => comment.openedInput = !comment.openedInput;\r\n\r\n    let answerComment = function (comment) {\r\n      if(store.getters.getAuth) {\r\n        if(comment.inputValue !== '') {\r\n          let userName = store.getters.getUsers\r\n              .filter((el) => el.id === parseInt(store.getters.getUserId))\r\n              .map(map => map.username).toString();\r\n          comment.answered.push({\r\n            user: userName,\r\n            date: formattedToday,\r\n            comment: comment.inputValue,\r\n            usersIdLikes: [],\r\n            usersIdDislikes: []\r\n          })\r\n          comment.inputValue = '';\r\n          comment.openedInput = false;\r\n        }\r\n        else {\r\n          alert('Пожалуйста, напишите ответ на комментарий')\r\n        }\r\n      }\r\n      else {\r\n        store.commit('toggleOpenedAuth');\r\n        document.body.style.overflow = \"hidden\";\r\n        document.documentElement.scrollTop = 0;\r\n      }\r\n    }\r\n    let commentsArray = computed(() => Object.values(store.getters.getComments));\r\n    let commentsKeys = computed(() => Object.keys(store.getters.getComments));\r\n\r\n    return {\r\n      commentsArray,\r\n      putLikeDis,\r\n      starSave,\r\n      leaveAComment,\r\n      inputComment,\r\n      answerComment,\r\n      openInput,\r\n      store\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}