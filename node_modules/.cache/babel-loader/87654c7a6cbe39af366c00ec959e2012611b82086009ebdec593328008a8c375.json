{"ast":null,"code":"import Comments from \"@/components/Comments.vue\";\nimport { useStore } from \"vuex\";\nimport { computed, watch } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport SliderSwiper from \"@/components/SliderSwiper.vue\";\nexport default {\n  name: \"Result\",\n  components: {\n    SliderSwiper,\n    Comments\n  },\n  setup() {\n    let store = useStore();\n    let auth = function () {\n      store.commit('toggleOpenedAuth');\n      document.body.style.overflow = \"hidden\";\n    };\n    let finalRes = {\n      name: '',\n      result: []\n    };\n    const isAuth = computed(() => store.getters.getAuth);\n    const users = computed(() => store.getters.getUsers);\n    if (isAuth.value) {\n      const result = JSON.parse(localStorage.getItem('test'));\n      finalRes['name'] = result.name;\n      finalRes['result'] = result.result;\n    }\n    watch(isAuth, (newValue, oldValue) => {\n      if (newValue) {\n        const result = JSON.parse(localStorage.getItem('test'));\n        users.value.filter(el => el.id.toString() === store.getters.getUserId)[0].history = JSON.stringify(result);\n        finalRes['name'] = result.name;\n        finalRes['result'] = result.result;\n      }\n    });\n    return {\n      store,\n      auth,\n      finalRes\n    };\n  }\n};","map":{"version":3,"names":["Comments","useStore","computed","watch","useRouter","SliderSwiper","name","components","setup","store","auth","commit","document","body","style","overflow","finalRes","result","isAuth","getters","getAuth","users","getUsers","value","JSON","parse","localStorage","getItem","newValue","oldValue","filter","el","id","toString","getUserId","history","stringify"],"sources":["E:\\Vue\\career_guidance\\src\\views\\Result.vue"],"sourcesContent":["<template>\r\n<div class=\"result\">\r\n  <h1 class=\"result__title\">Результаты</h1>\r\n  <h3 class=\"test__completed\">Поздравляем! Вы успешно сдали тест - {{ finalRes.name }}</h3>\r\n  <h4 class=\"test__completed\">Профессии, которые вам подходят: </h4>\r\n\r\n  <slider-swiper\r\n      v-if=\"store.getters.getAuth\"\r\n      :array=\"finalRes.result\"\r\n  ></slider-swiper>\r\n\r\n  <div v-else class=\"result__auth\">\r\n    <div class=\"result__statement\">Чтобы увидеть результат, пожалуйста, пройдите регистрацию или войдите в свою учётную запись</div>\r\n    <div class=\"result__auth-links\">\r\n      <a href=\"#\" @click=\"auth\">Войти в аккаунт</a>\r\n      <a href=\"#\" @click=\"auth\">Зарегестрироваться</a>\r\n    </div>\r\n  </div><!-- ./result__auth -->\r\n  <comments></comments>\r\n</div><!-- ./result -->\r\n</template>\r\n\r\n<script>\r\nimport Comments from \"@/components/Comments.vue\";\r\nimport {useStore} from \"vuex\";\r\nimport {computed, watch} from \"vue\";\r\nimport {useRouter} from \"vue-router\";\r\nimport SliderSwiper from \"@/components/SliderSwiper.vue\";\r\n\r\nexport default {\r\n  name: \"Result\",\r\n  components: {SliderSwiper, Comments},\r\n  setup() {\r\n    let store = useStore();\r\n    let auth = function () {\r\n      store.commit('toggleOpenedAuth');\r\n      document.body.style.overflow = \"hidden\";\r\n    }\r\n    let finalRes = {\r\n      name: '',\r\n      result: []\r\n    };\r\n\r\n    const isAuth = computed(() => store.getters.getAuth)\r\n    const users = computed(() => store.getters.getUsers)\r\n\r\n    if(isAuth.value) {\r\n      const result = JSON.parse(localStorage.getItem('test'))\r\n      finalRes['name'] = result.name\r\n      finalRes['result'] = result.result\r\n    }\r\n\r\n    watch(isAuth, (newValue, oldValue) => {\r\n      if(newValue) {\r\n        const result = JSON.parse(localStorage.getItem('test'));\r\n        users.value.filter((el) => el.id.toString() === store.getters.getUserId)[0].history = JSON.stringify(result);\r\n        finalRes['name'] = result.name\r\n        finalRes['result'] = result.result\r\n      }\r\n    })\r\n\r\n    return {\r\n      store,\r\n      auth,\r\n      finalRes\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":"AAuBA,OAAOA,QAAO,MAAO,2BAA2B;AAChD,SAAQC,QAAQ,QAAO,MAAM;AAC7B,SAAQC,QAAQ,EAAEC,KAAK,QAAO,KAAK;AACnC,SAAQC,SAAS,QAAO,YAAY;AACpC,OAAOC,YAAW,MAAO,+BAA+B;AAExD,eAAe;EACbC,IAAI,EAAE,QAAQ;EACdC,UAAU,EAAE;IAACF,YAAY;IAAEL;EAAQ,CAAC;EACpCQ,KAAKA,CAAA,EAAG;IACN,IAAIC,KAAI,GAAIR,QAAQ,EAAE;IACtB,IAAIS,IAAG,GAAI,SAAAA,CAAA,EAAY;MACrBD,KAAK,CAACE,MAAM,CAAC,kBAAkB,CAAC;MAChCC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,QAAO,GAAI,QAAQ;IACzC;IACA,IAAIC,QAAO,GAAI;MACbV,IAAI,EAAE,EAAE;MACRW,MAAM,EAAE;IACV,CAAC;IAED,MAAMC,MAAK,GAAIhB,QAAQ,CAAC,MAAMO,KAAK,CAACU,OAAO,CAACC,OAAO;IACnD,MAAMC,KAAI,GAAInB,QAAQ,CAAC,MAAMO,KAAK,CAACU,OAAO,CAACG,QAAQ;IAEnD,IAAGJ,MAAM,CAACK,KAAK,EAAE;MACf,MAAMN,MAAK,GAAIO,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MACtDX,QAAQ,CAAC,MAAM,IAAIC,MAAM,CAACX,IAAG;MAC7BU,QAAQ,CAAC,QAAQ,IAAIC,MAAM,CAACA,MAAK;IACnC;IAEAd,KAAK,CAACe,MAAM,EAAE,CAACU,QAAQ,EAAEC,QAAQ,KAAK;MACpC,IAAGD,QAAQ,EAAE;QACX,MAAMX,MAAK,GAAIO,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;QACvDN,KAAK,CAACE,KAAK,CAACO,MAAM,CAAEC,EAAE,IAAKA,EAAE,CAACC,EAAE,CAACC,QAAQ,EAAC,KAAMxB,KAAK,CAACU,OAAO,CAACe,SAAS,CAAC,CAAC,CAAC,CAAC,CAACC,OAAM,GAAIX,IAAI,CAACY,SAAS,CAACnB,MAAM,CAAC;QAC5GD,QAAQ,CAAC,MAAM,IAAIC,MAAM,CAACX,IAAG;QAC7BU,QAAQ,CAAC,QAAQ,IAAIC,MAAM,CAACA,MAAK;MACnC;IACF,CAAC;IAED,OAAO;MACLR,KAAK;MACLC,IAAI;MACJM;IACF;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}