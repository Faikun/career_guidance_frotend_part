{"ast":null,"code":"import { ref } from \"vue\";\nimport store from \"@/store\";\nimport axios from \"axios\";\nimport jwt_decode from 'jwt-decode';\nexport default {\n  name: \"Login\",\n  async setup() {\n    let isLogin = ref(true);\n    await store.dispatch(\"setAllUsers\");\n    const token = localStorage.getItem('jwt_token');\n    const decoded = jwt_decode(token);\n    const now = Date.now() / 1000; // текущее время в секундах\n\n    if (decoded.exp > now) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      const passwordImage = ref(null);\n      const passwordRef = ref(null);\n      const passwordImage_2 = ref(null);\n      const passwordRef_2 = ref(null);\n      const mailRef = ref(null);\n      const selectLocationRef = ref(null);\n      const nameReg = ref(null);\n      const mailReg = ref(null);\n      let name = ref('');\n      let mail = ref('');\n      let password = ref('');\n      let repeatedPassword = ref('');\n      let selectLocation = ref('');\n      let closeAuthBlock = function () {\n        store.commit('toggleOpenedAuth');\n        document.body.style.overflow = \"auto\";\n      };\n      let passwordToggle = function (passRef, passImage) {\n        passRef.setAttribute('type', passRef.getAttribute('type') === 'password' ? 'text' : 'password');\n        passImage.setAttribute('src', passImage.getAttribute('src') === require('../images/png/eye_opened.png') ? require('../images/png/eye_closed.png') : require('../images/png/eye_opened.png'));\n      };\n      let auth = async () => {\n        let user = store.getters.getUsers.filter(el => el.username === name.value);\n        user ? user = user[0] : console.log('Такой пользователь не найден');\n        try {\n          const {\n            data\n          } = await axios.post('auth/login', {\n            username: name.value,\n            password: password.value\n          });\n          if (data) {\n            axios.defaults.headers.common['Authorization'] = `Bearer ${data.token}`;\n            localStorage.setItem('jwt_token', data.token);\n            if (user.role === 'ROLE_ADMIN') {\n              store.commit('setAdmin');\n            }\n            store.commit('setAuth');\n            store.commit('setUserId', store.getters.getUsers.filter(el => el.email === mail.value).map(map => map.id).toString());\n            closeAuthBlock();\n            store.commit('setNotificationInfo', {\n              titleValue: 'Успех',\n              text: 'Авторизация успешно пройдена',\n              mode: 'success'\n            });\n          } else {\n            mailRef.value.style.outline = '1px solid red';\n            passwordRef.value.style.outline = '1px solid red';\n          }\n        } catch (e) {\n          console.log('Ошибка: ', e.message);\n        }\n      };\n      function passwordEqualFunction() {\n        if (password.value !== repeatedPassword.value) {\n          passwordRef_2.value.style.outline = '1px solid red';\n          return false;\n        } else {\n          passwordRef_2.value.style.outline = '1px solid black';\n          return true;\n        }\n      }\n      let register = async function () {\n        if (passwordEqualFunction()) {\n          const {\n            data\n          } = await axios.post('auth/register', {\n            username: name.value,\n            email: mail.value,\n            password: password.value,\n            location: selectLocation.value\n          }).then(e => {\n            if (e.request.status !== 200) {\n              const error = e.response.data.error;\n              console.log(error);\n              error.includes(\"Username shouldn\\'t be empty\") || error.includes(\"Username must contain between 3 and 20 characters\") ? nameReg.value.style.outline = '1px solid red' : nameReg.value.style.outline = '1px solid black';\n              error.includes(\"Email address should not be empty\") || error.includes(\"Invalid email address\") ? mailReg.value.style.outline = '1px solid red' : mailReg.value.style.outline = '1px solid black';\n              error.includes(\"Password should not be empty\") || error.includes(\"Password must contain between 5 and 32 characters\") ? passwordRef.value.style.outline = '1px solid red' : passwordRef.value.style.outline = '1px solid black';\n              error.includes(\"Location should not be empty\") ? selectLocationRef.value.style.outline = '1px solid red' : selectLocationRef.value.style.outline = '1px solid black';\n            }\n          });\n          if (data) {\n            axios.defaults.headers.common['Authorization'] = `Bearer ${data.token}`;\n            localStorage.setItem('jwt_token', data.token);\n            store.commit('setAuth');\n            store.commit('setUserId', store.getters.getUsers.filter(el => el.email === mail.value).map(map => map.id).toString());\n            closeAuthBlock();\n            store.commit('setNotificationInfo', {\n              titleValue: 'Успех',\n              text: 'Регистрация успешно пройдена',\n              mode: 'success'\n            });\n          }\n        }\n      };\n      return {\n        name,\n        mail,\n        password,\n        repeatedPassword,\n        selectLocation,\n        passwordToggle,\n        passwordImage,\n        passwordRef,\n        passwordImage_2,\n        passwordRef_2,\n        selectLocationRef,\n        store,\n        closeAuthBlock,\n        isLogin,\n        auth,\n        register,\n        nameReg,\n        mailReg,\n        mailRef\n      };\n    }\n  }\n};","map":{"version":3,"names":["ref","store","axios","jwt_decode","name","setup","isLogin","dispatch","token","localStorage","getItem","decoded","now","Date","exp","defaults","headers","common","passwordImage","passwordRef","passwordImage_2","passwordRef_2","mailRef","selectLocationRef","nameReg","mailReg","mail","password","repeatedPassword","selectLocation","closeAuthBlock","commit","document","body","style","overflow","passwordToggle","passRef","passImage","setAttribute","getAttribute","require","auth","user","getters","getUsers","filter","el","username","value","console","log","data","post","setItem","role","email","map","id","toString","titleValue","text","mode","outline","e","message","passwordEqualFunction","register","location","then","request","status","error","response","includes"],"sources":["E:\\Vue\\career_guidance\\src\\components\\TheAuth.vue"],"sourcesContent":["<template>\r\n<div class=\"auth\" v-if=\"store.getters.getOpenedAuth\">\r\n  <div class=\"auth__mask\" @click=\"closeAuthBlock\"></div><!-- ./login__mask -->\r\n\r\n  <form v-if=\"isLogin\" class=\"auth__wrapper\" @submit.prevent=\"auth\">\r\n    <div class=\"auth__intro\">\r\n      <h1 class=\"auth__name\">Вход</h1>\r\n      <img class=\"auth__close\" src=\"../images/png/Close.png\" alt=\"close\" @click=\"closeAuthBlock\">\r\n    </div><!--./auth__intro -->\r\n    <div class=\"auth__inputs\">\r\n      <div class=\"auth__inputs-item\">\r\n        <input placeholder=\"Логин\" type=\"text\" v-model.trim=\"name\" ref=\"mailRef\">\r\n      </div><!-- ./auth__inputs-item -->\r\n      <div class=\"auth__inputs-item\">\r\n        <input placeholder=\"Пароль\" type=\"password\" v-model.trim=\"password\" ref=\"passwordRef\">\r\n        <img\r\n             @click=\"passwordToggle(passwordRef, passwordImage)\"\r\n             class=\"auth__inputs-itemEye\"\r\n             src=\"../images/png/eye_opened.png\"\r\n             alt=\"visible/invisible password\"\r\n             ref=\"passwordImage\"\r\n        >\r\n      </div><!-- ./auth__inputs-item -->\r\n    </div><!-- ./auth__inputs -->\r\n    <button type=\"submit\" class=\"btn blue auth__button\">Войти</button><!-- ./auth__button -->\r\n    <router-link to=\"/reset\" class=\"auth__forgot\" @click=\"store.commit('toggleOpenedAuth')\">Забыли пароль?</router-link>\r\n    <button class=\"auth__reg\" type=\"button\" @click=\"isLogin = false\">Быстрая регистрация</button>\r\n  </form><!-- ./auth__wrapper -->\r\n\r\n  <form v-else class=\"auth__wrapper\">\r\n    <div class=\"auth__intro\">\r\n      <h1 class=\"auth__name\">Регистрация</h1>\r\n      <img class=\"auth__close\" src=\"../images/png/Close.png\" alt=\"close\" @click=\"closeAuthBlock\">\r\n    </div><!--./auth__intro -->\r\n    <div class=\"auth__inputs\">\r\n      <div class=\"auth__inputs-item\">\r\n        <input placeholder=\"Логин\" type=\"text\" v-model.trim=\"name\" ref=\"nameReg\">\r\n      </div><!-- ./auth__inputs-item -->\r\n      <div class=\"auth__inputs-item\">\r\n        <input placeholder=\"Почта\" type=\"text\" v-model.trim=\"mail\" ref=\"mailReg\">\r\n      </div><!-- ./auth__inputs-item -->\r\n      <div class=\"auth__inputs-item\">\r\n        <input placeholder=\"Пароль\" type=\"password\" v-model.trim=\"password\" ref=\"passwordRef\">\r\n        <img\r\n            @click=\"passwordToggle(passwordRef, passwordImage)\"\r\n            class=\"auth__inputs-itemEye\"\r\n            src=\"../images/png/eye_opened.png\"\r\n            alt=\"visible/invisible password\"\r\n            ref=\"passwordImage\"\r\n        >\r\n      </div><!-- ./auth__inputs-item -->\r\n      <div class=\"auth__inputs-item\">\r\n        <input placeholder=\"Подтвердить пароль\" type=\"password\" v-model.trim=\"repeatedPassword\" ref=\"passwordRef_2\">\r\n        <img\r\n            @click=\"passwordToggle(passwordRef_2, passwordImage_2)\"\r\n            class=\"auth__inputs-itemEye\"\r\n            src=\"../images/png/eye_opened.png\"\r\n            alt=\"visible/invisible password\"\r\n            ref=\"passwordImage_2\"\r\n        >\r\n      </div><!-- ./auth__inputs-item -->\r\n      <div class=\"auth__inputs-item\">\r\n        <select name=\"\" id=\"\" v-model=\"selectLocation\" ref=\"selectLocationRef\">\r\n          <option value>Выберите город</option>\r\n          <option selected value=\"Алматы\">Алматы</option>\r\n          <option value=\"Нур-Султан\">Нур-Султан</option>\r\n          <option value=\"Шымкент\">Шымкент</option>\r\n          <option value=\"Туркестан\">Туркестан</option>\r\n        </select>\r\n      </div>\r\n\r\n    </div><!-- ./auth__inputs -->\r\n    <button type=\"submit\" class=\"auth__button btn blue\" @click.prevent=\"register\">Регистрация</button><!-- ./auth__button -->\r\n    <a @click=\"isLogin = true\" class=\"auth__forgot\" href=\"#\">Назад</a>\r\n  </form><!-- ./auth__wrapper -->\r\n\r\n</div><!-- ./auth -->\r\n</template>\r\n\r\n<script>\r\nimport {ref} from \"vue\";\r\nimport store from \"@/store\";\r\nimport axios from \"axios\";\r\nimport jwt_decode from 'jwt-decode';\r\nexport default {\r\n  name: \"Login\",\r\n  async setup () {\r\n    let isLogin = ref(true)\r\n    await store.dispatch(\"setAllUsers\");\r\n\r\n    const token = localStorage.getItem('jwt_token');\r\n    const decoded = jwt_decode(token);\r\n    const now = Date.now() / 1000; // текущее время в секундах\r\n\r\n    if (decoded.exp > now) {\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    else {\r\n      const passwordImage = ref(null)\r\n      const passwordRef = ref(null)\r\n      const passwordImage_2 = ref(null)\r\n      const passwordRef_2 = ref(null)\r\n      const mailRef = ref(null)\r\n      const selectLocationRef = ref(null)\r\n\r\n      const nameReg = ref(null);\r\n      const mailReg = ref(null);\r\n\r\n      let name = ref('');\r\n      let mail = ref('');\r\n      let password = ref('');\r\n      let repeatedPassword = ref('');\r\n      let selectLocation = ref('')\r\n\r\n      let closeAuthBlock = function () {\r\n        store.commit('toggleOpenedAuth');\r\n        document.body.style.overflow = \"auto\";\r\n      }\r\n\r\n      let passwordToggle = function (passRef, passImage) {\r\n        passRef.setAttribute('type',\r\n            passRef.getAttribute('type') === 'password' ? 'text' : 'password');\r\n        passImage.setAttribute('src',\r\n            passImage.getAttribute('src') === require('../images/png/eye_opened.png') ?\r\n                require('../images/png/eye_closed.png') : require('../images/png/eye_opened.png'));\r\n      }\r\n\r\n      let auth = async () => {\r\n        let user = store.getters.getUsers.filter((el) => el.username === name.value);\r\n        user ? user = user[0] : console.log('Такой пользователь не найден')\r\n\r\n        try {\r\n          const {data} = await axios\r\n              .post('auth/login', {\r\n                username: name.value,\r\n                password: password.value\r\n              });\r\n\r\n          if (data) {\r\n            axios.defaults.headers.common['Authorization'] = `Bearer ${data.token}`\r\n            localStorage.setItem('jwt_token', data.token);\r\n\r\n            if(user.role === 'ROLE_ADMIN') {\r\n              store.commit('setAdmin');\r\n            }\r\n            store.commit('setAuth');\r\n            store.commit('setUserId', store.getters.getUsers.filter((el) => el.email === mail.value).map(map => map.id).toString());\r\n            closeAuthBlock();\r\n            store.commit('setNotificationInfo', { titleValue: 'Успех', text: 'Авторизация успешно пройдена', mode: 'success'} )\r\n          }\r\n          else {\r\n            mailRef.value.style.outline = '1px solid red';\r\n            passwordRef.value.style.outline = '1px solid red';\r\n          }\r\n        }\r\n        catch (e) {\r\n          console.log('Ошибка: ', e.message)\r\n        }\r\n      }\r\n\r\n      function passwordEqualFunction() {\r\n        if (password.value !== repeatedPassword.value) {\r\n          passwordRef_2.value.style.outline = '1px solid red';\r\n          return false\r\n        } else {\r\n          passwordRef_2.value.style.outline = '1px solid black';\r\n          return true\r\n        }\r\n      }\r\n\r\n      let register = async function () {\r\n        if (passwordEqualFunction()) {\r\n\r\n          const {data} = await axios.post('auth/register', {\r\n            username: name.value,\r\n            email: mail.value,\r\n            password: password.value,\r\n            location: selectLocation.value\r\n          }).then(e => {\r\n            if(e.request.status !== 200) {\r\n              const error = e.response.data.error\r\n              console.log(error)\r\n              error.includes(\"Username shouldn\\'t be empty\") || error.includes(\"Username must contain between 3 and 20 characters\") ? nameReg.value.style.outline = '1px solid red' : nameReg.value.style.outline = '1px solid black';\r\n              error.includes(\"Email address should not be empty\") || error.includes(\"Invalid email address\") ? mailReg.value.style.outline = '1px solid red' : mailReg.value.style.outline = '1px solid black';\r\n              error.includes(\"Password should not be empty\") || error.includes(\"Password must contain between 5 and 32 characters\") ? passwordRef.value.style.outline = '1px solid red' : passwordRef.value.style.outline = '1px solid black';\r\n              error.includes(\"Location should not be empty\") ? selectLocationRef.value.style.outline = '1px solid red' : selectLocationRef.value.style.outline = '1px solid black';\r\n            }\r\n          })\r\n\r\n          if (data) {\r\n            axios.defaults.headers.common['Authorization'] = `Bearer ${data.token}`\r\n            localStorage.setItem('jwt_token', data.token);\r\n            store.commit('setAuth');\r\n            store.commit('setUserId', store.getters.getUsers.filter((el) => el.email === mail.value).map(map => map.id).toString());\r\n            closeAuthBlock();\r\n            store.commit('setNotificationInfo', { titleValue: 'Успех', text: 'Регистрация успешно пройдена', mode: 'success'} )\r\n          }\r\n        }\r\n      }\r\n\r\n      return {\r\n        name, mail, password, repeatedPassword, selectLocation,\r\n        passwordToggle,\r\n        passwordImage, passwordRef, passwordImage_2, passwordRef_2, selectLocationRef,\r\n        store,\r\n        closeAuthBlock,\r\n        isLogin,\r\n        auth, register,\r\n        nameReg, mailReg, mailRef\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}